From from From
: : :
Greg greg Greg
. . .
Onufer onuf Onufer
@ @ @
Eng eng Eng
. . .
Sun sun Sun
. . .
COM com COM
( ( (
Greg greg Greg
Onufer onuf Onufer
) ) )
Subject subject Subject
: : :
Re re Re
: : :
Let let Let
' ' '
s s s
build build build
software softwar software
cryptophones cryptophon cryptophones
for for for
over over over
the the the
internet internet internet
. . .
. . .
. . .
Organization organ Organization
: : :
Sun sun Sun
Microsystems microsystem Microsystems
Computer comput Computer
Corporation corpor Corporation
, , ,
Mtn mtn Mtn
. . .
View view View
, , ,
California california California
Lines line Lines
: : :
229 229 229
Distribution distribut Distribution
: : :
usa usa usa
NNTP nntp NNTP
- - -
Posting post Posting
- - -
Host host Host
: : :
cheers cheer cheer
In in In
< < <
C c C
622 622 622
A a A
1 1 1
. . .
7 7 7
t t t
6 6 6
@ @ @
demon demon demon
. . .
co co co
. . .
uk uk uk
> > >
Graham graham Graham
Toal toal Toal
< < <
gtoal gtoal gtoal
@ @ @
gtoal gtoal gtoal
. . .
com com com
> > >
writes write write
: : :
> > >
In in In
article articl article
< < <
1 1 1
regq regq regq
0 0 0
INNn innn INNn
7 7 7
u u u
@ @ @
gap gap gap
. . .
caltech caltech caltech
. . .
edu edu edu
> > >
hal hal hal
@ @ @
cco cco cco
. . .
caltech caltech caltech
. . .
edu edu edu
( ( (
Hal hal Hal
Finney finney Finney
) ) )
writes write write
: : :
> > >
: : :
I i I
tried tri try
this this this
code code code
yesterday yesterday yesterday
. . .
On on On
my my my
Sparcstation sparcstat Sparcstation
ELC elc ELC
it it it
takes take take
over over over
> > >
: : :
300 300 300
seconds second second
to to to
compress compress compress
22 22 22
seconds second second
' ' '
worth worth worth
of of of
speech speech speech
. . .
This this This
means mean mean
that that that
it it it
> > >
: : :
needs need need
to to to
be be be
" " "
optimized optim optimize
" " "
by by by
over over over
a a a
factor factor factor
of of of
10 10 10
before befor before
it it it
will will will
be be be
usable usabl usable
> > >
: : :
in in in
even even even
a a a
half half half
- - -
duplex duplex duplex
mode mode mode
. . .
> > >
Ouch ouch Ouch
! ! !
Thanks thank Thanks
for for for
trying tri try
it it it
. . .
The the The
following follow following
program program program
is is be
a a a
very veri very
quick quick quick
hack hack hack
I i I
created creat create
a a a
few few few
months month month
ago ago ago
to to to
determine determin determine
whether whether whether
a a a
Sun sun Sun
Sparcstation sparcstat Sparcstation
IPC ipc IPC
could could could
perform perform perform
real real real
- - -
time time time
, , ,
full full full
- - -
duplex duplex duplex
encrypted encrypt encrypt
audio audio audio
with with with
resulting result result
data data data
rates rate rate
sustainable sustain sustainable
by by by
today today today
' ' '
s s s
modems modem modem
. . .
This this This
test test test
program program program
reads read read
linearly linear linearly
- - -
encoded encod encode
audio audio audio
from from from
the the the
audio audio audio
device devic device
, , ,
compresses compress compress
it it it
with with with
GSM gsm GSM
06 06 06
. . .
10 10 10
( ( (
compresses compress compress
frames frame frame
of of of
160 160 160
13 13 13
- - -
bit bit bit
samples sampl sample
recorded record record
at at at
8 8 8
kHz khz kHz
into into into
260 260 260
bits bit bit
resulting result result
in in in
a a a
50 50 50
Hz hz Hz
frame frame frame
rate rate rate
) ) )
, , ,
encrypts encrypt encrypt
it it it
with with with
DES des DES
, , ,
then then then
reverses revers reverse
the the the
process process process
and and and
sends send send
the the the
reconstructed reconstruct reconstructed
audio audio audio
back back back
to to to
the the the
audio audio audio
device devic device
. . .
The the The
compressed compress compressed
, , ,
encrypted encrypt encrypted
audio audio audio
stream stream stream
is is be
13 13 13
kbits kbit kbit
/ / /
s s s
( ( (
! ! !
) ) )
. . .
My my My
Sparcstation sparcstat Sparcstation
IPC ipc IPC
( ( (
not not not
exactly exact exactly
a a a
very veri very
fast fast fast
machine machin machine
these these these
days day day
, , ,
certainly certain certainly
slower slower slow
than than than
an an an
ELC elc ELC
) ) )
would would would
just just just
barely bare barely
sustain sustain sustain
this this this
activity activ activity
( ( (
audio audio audio
underruns underrun underruns
would would would
occcur occcur occcur
but but but
the the the
speech speech speech
was was be
very veri very
intelligible intellig intelligible
) ) )
. . .
I i I
ran ran run
it it it
as as a
a a a
real real real
- - -
time time time
process process process
to to to
get get get
the the the
best best best
results result result
. . .
Remember rememb Remember
, , ,
though though though
, , ,
that that that
this this this
program program program
is is be
a a a
quick quick quick
hack hack hack
and and and
the the the
performance perform performance
can can can
certainly certain certainly
be be be
improved improv improve
. . .
The the The
audio audio audio
compression compress compression
routines routin routine
can can can
be be be
ftp ftp ftp
' ' '
d d d
from from from
tub tub tub
. . .
cs cs c
. . .
tu tu tu
- - -
berlin berlin berlin
. . .
de de de
, , ,
I i I
believe believ believe
( ( (
look look look
for for for
gsm gsm gsm
or or or
toast toast toast
) ) )
. . .
I i I
used use use
Eric eric Eric
Young young Young
' ' '
s s s
DES des DES
implementation implement implementation
but but but
I i I
no no no
longer longer longer
know know know
where where where
I i I
got got get
it it it
from from from
. . .
Cheers cheer Cheers
! ! !
greg greg greg
< < <
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
CUT cut CUT
HERE here HERE
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
> > >
/ / /
* * *
* * *
Test test Test
program program program
to to to
see see see
how how how
much much much
CPU cpu CPU
it it it
takes take take
for for for
secure secur secure
digital digit digital
audio audio audio
. . .
* * *
Written written Written
by by by
G g G
. . .
Onufer onuf Onufer
( ( (
greg greg greg
@ @ @
cheers cheer cheer
. . .
Bungi bungi Bungi
. . .
COM com COM
) ) )
. . .
* * *
* * *
Written written Written
on on on
a a a
Sun sun Sun
IPC ipc IPC
running run run
Solaris solari Solaris
2 2 2
. . .
2 2 2
with with with
a a a
Sun sun Sun
ISDN isdn ISDN
S s S
- - -
Bus bus Bus
card card card
* * *
and and and
a a a
SpeakerBox speakerbox SpeakerBox
. . .
* * *
/ / /
# # #
include includ include
< < <
stdlib stdlib stdlib
. . .
h h h
> > >
# # #
include includ include
< < <
unistd unistd unistd
. . .
h h h
> > >
# # #
include includ include
< < <
fcntl fcntl fcntl
. . .
h h h
> > >
# # #
include includ include
< < <
stdio stdio stdio
. . .
h h h
> > >
# # #
include includ include
< < <
sys sys sys
/ / /
types type type
. . .
h h h
> > >
# # #
include includ include
< < <
sys sys sys
/ / /
audioio audioio audioio
. . .
h h h
> > >
# # #
include includ include
< < <
stropts stropt stropts
. . .
h h h
> > >
# # #
include includ include
< < <
gsm gsm gsm
. . .
h h h
> > >
# # #
include includ include
< < <
des des de
. . .
h h h
> > >
boolean boolean boolean
_ _ _
t t t
svs svs svs
_ _ _
audio audio audio
_ _ _
init init init
( ( (
int int int
fd fd fd
, , ,
audio audio audio
_ _ _
info info info
_ _ _
t t t
* * *
prev prev prev
_ _ _
info info info
) ) )
{ { {
audio audio audio
_ _ _
info info info
_ _ _
t t t
info info info
; ; ;
if if if
( ( (
prev prev prev
_ _ _
info info info
! ! !
= = =
NULL null NULL
) ) )
{ { {
if if if
( ( (
ioctl ioctl ioctl
( ( (
fd fd fd
, , ,
AUDIO audio AUDIO
_ _ _
GETINFO getinfo GETINFO
, , ,
prev prev prev
_ _ _
info info info
) ) )
< < <
0 0 0
) ) )
{ { {
perror perror perror
( ( (
" " "
AUDIO audio AUDIO
_ _ _
GETINFO getinfo GETINFO
" " "
) ) )
; ; ;
return return return
( ( (
B b B
_ _ _
FALSE fals FALSE
) ) )
; ; ;
} } }
} } }
AUDIO audio AUDIO
_ _ _
INITINFO initinfo INITINFO
( ( (
& & &
info info info
) ) )
; ; ;
info info info
. . .
record record record
. . .
pause paus pause
= = =
B b B
_ _ _
TRUE true TRUE
; ; ;
info info info
. . .
play play play
. . .
pause paus pause
= = =
B b B
_ _ _
TRUE true TRUE
; ; ;
info info info
. . .
play play play
. . .
sample sampl sample
_ _ _
rate rate rate
= = =
8000 8000 8000
; ; ;
info info info
. . .
play play play
. . .
encoding encod encode
= = =
AUDIO audio AUDIO
_ _ _
ENCODING encod ENCODING
_ _ _
LINEAR linear LINEAR
; ; ;
info info info
. . .
play play play
. . .
channels channel channel
= = =
1 1 1
; ; ;
info info info
. . .
play play play
. . .
precision precis precision
= = =
16 16 16
; ; ;
info info info
. . .
record record record
. . .
sample sampl sample
_ _ _
rate rate rate
= = =
8000 8000 8000
; ; ;
info info info
. . .
record record record
. . .
encoding encod encode
= = =
AUDIO audio AUDIO
_ _ _
ENCODING encod ENCODING
_ _ _
LINEAR linear LINEAR
; ; ;
info info info
. . .
record record record
. . .
channels channel channel
= = =
1 1 1
; ; ;
info info info
. . .
record record record
. . .
precision precis precision
= = =
16 16 16
; ; ;
info info info
. . .
record record record
. . .
buffer buffer buffer
_ _ _
size size size
= = =
320 320 320
* * *
4 4 4
; ; ;
if if if
( ( (
ioctl ioctl ioctl
( ( (
fd fd fd
, , ,
AUDIO audio AUDIO
_ _ _
SETINFO setinfo SETINFO
, , ,
& & &
info info info
) ) )
< < <
0 0 0
) ) )
{ { {
perror perror perror
( ( (
" " "
AUDIO audio AUDIO
_ _ _
SETINFO setinfo SETINFO
" " "
) ) )
; ; ;
return return return
( ( (
B b B
_ _ _
FALSE fals FALSE
) ) )
; ; ;
} } }
if if if
( ( (
ioctl ioctl ioctl
( ( (
fd fd fd
, , ,
I i I
_ _ _
FLUSH flush FLUSH
, , ,
FLUSHRW flushrw FLUSHRW
) ) )
< < <
0 0 0
) ) )
{ { {
perror perror perror
( ( (
" " "
I i I
_ _ _
FLUSH flush FLUSH
" " "
) ) )
; ; ;
return return return
( ( (
B b B
_ _ _
FALSE fals FALSE
) ) )
; ; ;
} } }
AUDIO audio AUDIO
_ _ _
INITINFO initinfo INITINFO
( ( (
& & &
info info info
) ) )
; ; ;
info info info
. . .
record record record
. . .
pause paus pause
= = =
B b B
_ _ _
FALSE fals FALSE
; ; ;
info info info
. . .
play play play
. . .
pause paus pause
= = =
B b B
_ _ _
FALSE fals FALSE
; ; ;
if if if
( ( (
ioctl ioctl ioctl
( ( (
fd fd fd
, , ,
AUDIO audio AUDIO
_ _ _
SETINFO setinfo SETINFO
, , ,
& & &
info info info
) ) )
< < <
0 0 0
) ) )
{ { {
perror perror perror
( ( (
" " "
AUDIO audio AUDIO
_ _ _
SETINFO setinfo SETINFO
" " "
) ) )
; ; ;
return return return
( ( (
B b B
_ _ _
FALSE fals FALSE
) ) )
; ; ;
} } }
return return return
( ( (
B b B
_ _ _
TRUE true TRUE
) ) )
; ; ;
} } }
boolean boolean boolean
_ _ _
t t t
svs svs svs
_ _ _
in in in
( ( (
int int int
ifd ifd ifd
, , ,
gsm gsm gsm
handle handl handle
, , ,
gsm gsm gsm
_ _ _
byte byte byte
* * *
buf buf buf
) ) )
{ { {
gsm gsm gsm
_ _ _
signal signal signal
sample sampl sample
[ [ [
160 160 160
] ] ]
; ; ;
if if if
( ( (
read read read
( ( (
ifd ifd ifd
, , ,
sample sampl sample
, , ,
sizeof sizeof sizeof
( ( (
sample sampl sample
) ) )
) ) )
! ! !
= = =
sizeof sizeof sizeof
( ( (
sample sampl sample
) ) )
) ) )
{ { {
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
svs svs svs
_ _ _
in in in
: : :
short short short
read read read
\ \ \
n n n
" " "
) ) )
; ; ;
return return return
( ( (
B b B
_ _ _
FALSE fals FALSE
) ) )
; ; ;
} } }
gsm gsm gsm
_ _ _
encode encod encode
( ( (
handle handl handle
, , ,
sample sampl sample
, , ,
buf buf buf
) ) )
; ; ;
return return return
( ( (
B b B
_ _ _
TRUE true TRUE
) ) )
; ; ;
} } }
boolean boolean boolean
_ _ _
t t t
svs svs svs
_ _ _
out out out
( ( (
int int int
ofd ofd ofd
, , ,
gsm gsm gsm
handle handl handle
, , ,
gsm gsm gsm
_ _ _
byte byte byte
* * *
buf buf buf
) ) )
{ { {
gsm gsm gsm
_ _ _
signal signal signal
sample sampl sample
[ [ [
160 160 160
] ] ]
; ; ;
if if if
( ( (
gsm gsm gsm
_ _ _
decode decod decode
( ( (
handle handl handle
, , ,
buf buf buf
, , ,
sample sampl sample
) ) )
< < <
0 0 0
) ) )
{ { {
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
svs svs svs
_ _ _
out out out
: : :
gsm gsm gsm
_ _ _
decode decod decode
failed fail fail
\ \ \
n n n
" " "
) ) )
; ; ;
return return return
( ( (
B b B
_ _ _
FALSE fals FALSE
) ) )
; ; ;
} } }
if if if
( ( (
write write write
( ( (
ofd ofd ofd
, , ,
sample sampl sample
, , ,
sizeof sizeof sizeof
( ( (
sample sampl sample
) ) )
) ) )
! ! !
= = =
sizeof sizeof sizeof
( ( (
sample sampl sample
) ) )
) ) )
{ { {
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
svs svs svs
_ _ _
out out out
: : :
short short short
write write write
\ \ \
n n n
" " "
) ) )
; ; ;
return return return
( ( (
B b B
_ _ _
FALSE fals FALSE
) ) )
; ; ;
} } }
return return return
( ( (
B b B
_ _ _
TRUE true TRUE
) ) )
; ; ;
} } }
main main main
( ( (
) ) )
{ { {
gsm gsm gsm
handle handl handle
; ; ;
gsm gsm gsm
_ _ _
frame frame frame
frame frame frame
; ; ;
int int int
audiofd audiofd audiofd
; ; ;
int int int
option option option
; ; ;
des des de
_ _ _
cblock cblock cblock
key key key
, , ,
ivec ivec ivec
_ _ _
in in in
, , ,
ivec ivec ivec
_ _ _
out out out
; ; ;
des des de
_ _ _
key key key
_ _ _
schedule schedul schedule
ks ks k
_ _ _
in in in
, , ,
ks ks ks
_ _ _
out out out
; ; ;
des des de
_ _ _
cblock cblock cblock
cbuf cbuf cbuf
_ _ _
in in in
[ [ [
4 4 4
] ] ]
, , ,
cbuf cbuf cbuf
_ _ _
out out out
[ [ [
4 4 4
] ] ]
, , ,
cbuf cbuf cbuf
_ _ _
buf buf buf
[ [ [
4 4 4
] ] ]
; ; ;
audiofd audiofd audiofd
= = =
open open open
( ( (
" " "
/ / /
dev dev dev
/ / /
audio audio audio
" " "
, , ,
O o O
_ _ _
RDWR rdwr RDWR
) ) )
; ; ;
if if if
( ( (
audiofd audiofd audiofd
< < <
0 0 0
) ) )
{ { {
perror perror perror
( ( (
" " "
open open open
" " "
) ) )
; ; ;
exit exit exit
( ( (
4 4 4
) ) )
; ; ;
} } }
/ / /
* * *
* * *
Initialize initi Initialize
GSM gsm GSM
compression compress compression
code code code
* * *
/ / /
if if if
( ( (
( ( (
handle handl handle
= = =
gsm gsm gsm
_ _ _
create creat create
( ( (
) ) )
) ) )
= = =
= = =
NULL null NULL
) ) )
{ { {
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
svs svs svs
: : :
gsm gsm gsm
_ _ _
create creat create
failed fail fail
\ \ \
n n n
" " "
) ) )
; ; ;
exit exit exit
( ( (
4 4 4
) ) )
; ; ;
} } }
option option option
= = =
B b B
_ _ _
TRUE true TRUE
; ; ;
if if if
( ( (
gsm gsm gsm
_ _ _
option option option
( ( (
handle handl handle
, , ,
GSM gsm GSM
_ _ _
OPT opt OPT
_ _ _
FAST fast FAST
, , ,
& & &
option option option
) ) )
< < <
0 0 0
) ) )
{ { {
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
svs svs svs
: : :
gsm gsm gsm
_ _ _
option option option
( ( (
FAST fast FAST
) ) )
failed fail fail
\ \ \
n n n
" " "
) ) )
; ; ;
exit exit exit
( ( (
4 4 4
) ) )
; ; ;
} } }
/ / /
* * *
* * *
Initialize initi Initialize
DES des DES
code code code
* * *
/ / /
des des des
_ _ _
random random random
_ _ _
key key key
( ( (
& & &
key key key
) ) )
; ; ;
if if if
( ( (
des des de
_ _ _
set set set
_ _ _
key key key
( ( (
& & &
key key key
, , ,
ks ks ks
_ _ _
in in in
) ) )
< < <
0 0 0
) ) )
{ { {
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
svs svs svs
: : :
des des de
_ _ _
set set set
_ _ _
key key key
failed fail fail
\ \ \
n n n
" " "
) ) )
; ; ;
exit exit exit
( ( (
4 4 4
) ) )
; ; ;
} } }
if if if
( ( (
des des de
_ _ _
set set set
_ _ _
key key key
( ( (
& & &
key key key
, , ,
ks ks ks
_ _ _
out out out
) ) )
< < <
0 0 0
) ) )
{ { {
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
svs svs svs
: : :
des des de
_ _ _
set set set
_ _ _
key key key
failed fail fail
\ \ \
n n n
" " "
) ) )
; ; ;
exit exit exit
( ( (
4 4 4
) ) )
; ; ;
} } }
memset memset memset
( ( (
ivec ivec ivec
_ _ _
in in in
, , ,
0 0 0
, , ,
sizeof sizeof sizeof
( ( (
ivec ivec ivec
_ _ _
in in in
) ) )
) ) )
; ; ;
memset memset memset
( ( (
ivec ivec ivec
_ _ _
out out out
, , ,
0 0 0
, , ,
sizeof sizeof sizeof
( ( (
ivec ivec ivec
_ _ _
out out out
) ) )
) ) )
; ; ;
/ / /
* * *
* * *
Open open Open
audio audio audio
device devic device
and and and
configure configur configure
it it it
* * *
/ / /
if if if
( ( (
! ! !
svs svs svs
_ _ _
audio audio audio
_ _ _
init init init
( ( (
audiofd audiofd audiofd
, , ,
NULL null NULL
) ) )
) ) )
exit exit exit
( ( (
3 3 3
) ) )
; ; ;
for for for
( ( (
; ; ;
; ; ;
) ) )
{ { {
/ / /
* * *
* * *
Get get Get
160 160 160
samples sampl sample
( ( (
16 16 16
- - -
bit bit bit
linear linear linear
8000 8000 8000
Hz hz Hz
) ) )
and and and
* * *
convert convert convert
to to to
a a a
33 33 33
byte byte byte
frame frame frame
* * *
/ / /
if if if
( ( (
! ! !
svs svs svs
_ _ _
in in in
( ( (
audiofd audiofd audiofd
, , ,
handle handl handle
, , ,
frame frame frame
) ) )
) ) )
exit exit exit
( ( (
1 1 1
) ) )
; ; ;
/ / /
* * *
* * *
Encrypt encrypt Encrypt
/ / /
Decrypt decrypt Decrypt
block block block
* * *
/ / /
des des des
_ _ _
cbc cbc cbc
_ _ _
encrypt encrypt encrypt
( ( (
frame frame frame
, , ,
cbuf cbuf cbuf
_ _ _
out out out
, , ,
( ( (
long long long
) ) )
32 32 32
, , ,
ks ks k
_ _ _
in in in
, , ,
ivec ivec ivec
_ _ _
in in in
, , ,
DES des DES
_ _ _
ENCRYPT encrypt ENCRYPT
) ) )
; ; ;
des des de
_ _ _
cbc cbc cbc
_ _ _
encrypt encrypt encrypt
( ( (
cbuf cbuf cbuf
_ _ _
out out out
, , ,
cbuf cbuf cbuf
_ _ _
buf buf buf
, , ,
( ( (
long long long
) ) )
32 32 32
, , ,
ks ks k
_ _ _
out out out
, , ,
ivec ivec ivec
_ _ _
out out out
, , ,
DES des DES
_ _ _
DECRYPT decrypt DECRYPT
) ) )
; ; ;
memmove memmov memmove
( ( (
frame frame frame
, , ,
cbuf cbuf cbuf
_ _ _
buf buf buf
, , ,
32 32 32
) ) )
; ; ;
# # #
if if if
0 0 0
if if if
( ( (
memcmp memcmp memcmp
( ( (
cbuf cbuf cbuf
_ _ _
in in in
, , ,
cbuf cbuf cbuf
_ _ _
buf buf buf
, , ,
32 32 32
) ) )
! ! !
= = =
0 0 0
) ) )
{ { {
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
svs svs svs
: : :
memcmp memcmp memcmp
failed fail fail
\ \ \
n n n
" " "
) ) )
; ; ;
exit exit exit
( ( (
4 4 4
) ) )
; ; ;
} } }
# # #
endif endif endif
/ / /
* * *
* * *
Take take Take
33 33 33
byte byte byte
frame frame frame
and and and
convert convert convert
to to to
160 160 160
samples sampl sample
* * *
and and and
play play play
* * *
/ / /
if if if
( ( (
! ! !
svs svs svs
_ _ _
out out out
( ( (
audiofd audiofd audiofd
, , ,
handle handl handle
, , ,
frame frame frame
) ) )
) ) )
exit exit exit
( ( (
2 2 2
) ) )
; ; ;
} } }
gsm gsm gsm
_ _ _
destroy destroy destroy
( ( (
handle handl handle
) ) )
; ; ;
} } }
< < <
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
CUT cut CUT
HERE here HERE
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
> > >
