From from From
: : :
lusardi lusardi lusardi
@ @ @
cs cs c
. . .
buffalo buffalo buffalo
. . .
edu edu edu
( ( (
Christopher christoph Christopher
Lusardi lusardi Lusardi
) ) )
Subject subject Subject
: : :
Program program Program
Included includ Included
: : :
2 2 2
Edge edg Edge
Detection detect Detection
Algorithms algorithm Algorithms
! ! !
Article articl Article
- - -
I i I
. . .
D d D
. . .
: : :
acsu acsu acsu
. . .
C c C
5 5 5
JqM jqm JqM
6 6 6
. . .
HLG hlg HLG
Organization organ Organization
: : :
State state State
University univers University
of of of
New new New
York york York
at at at
Buffalo buffalo Buffalo
/ / /
Comp comp Comp
Sci sci Sci
Lines line Lines
: : :
142 142 142
Nntp nntp Nntp
- - -
Posting post Posting
- - -
Host host Host
: : :
hadar hadar hadar
. . .
cs cs c
. . .
buffalo buffalo buffalo
. . .
edu edu edu
/ / /
* * *
This this This
program program program
doesn doesn doesn
' ' '
t t t
detect detect detect
edges edg edge
with with with
compass compass compass
operators oper operator
and and and
a a a
laplacian laplacian laplacian
operator oper operator
. . .
It it It
should should should
output output output
2 2 2
raw raw raw
grey grey grey
- - -
scale scale scale
images imag image
with with with
edges edg edge
. . .
The the The
output output output
doesn doesn doesn
' ' '
t t t
look look look
like like like
edges edg edge
at at at
all all all
. . .
In in In
novicee novice novicee
terms term term
, , ,
how how how
do do do
I i I
correct correct correct
the the the
errors error error
? ? ?
Any ani Any
improvements improv improvement
are are be
welcome welcom welcome
. . .
( ( (
I i I
' ' '
ll ll ll
even even even
accept accept accept
your your your
corrected correct corrected
code code code
. . .
) ) )
( ( (
If if If
I i I
convolve convolv convolve
the the the
INPUT input INPUT
. . .
IMAGE imag IMAGE
with with with
a a a
digital digit digital
gaussian gaussian gaussian
[ [ [
7 7 7
by by by
7 7 7
] ] ]
to to to
remove remov remove
noise nois noise
, , ,
will will will
I i I
get get get
an an an
improvement improv improvement
with with with
the the the
laplacian laplacian laplacian
. . .
) ) )
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
2 2 2
types type type
of of of
edge edg edge
detection detect detection
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
* * *
/ / /
# # #
include includ include
< < <
stdio stdio stdio
. . .
h h h
> > >
# # #
include includ include
< < <
math math math
. . .
h h h
> > >
# # #
define defin define
IMAGEWIDTH imagewidth IMAGEWIDTH
300 300 300
# # #
define defin define
IMAGEHEIGHT imageheight IMAGEHEIGHT
300 300 300
unsigned unsign unsigned
char char char
Input input Input
_ _ _
Image imag Image
[ [ [
IMAGEHEIGHT imageheight IMAGEHEIGHT
] ] ]
[ [ [
IMAGEWIDTH imagewidth IMAGEWIDTH
] ] ]
; ; ;
unsigned unsign unsigned
char char char
Angles angl Angles
_ _ _
Wanted want Wanted
[ [ [
IMAGEHEIGHT imageheight IMAGEHEIGHT
] ] ]
[ [ [
IMAGEWIDTH imagewidth IMAGEWIDTH
] ] ]
; ; ;
unsigned unsign unsigned
char char char
Magnitude magnitud Magnitude
_ _ _
Image imag Image
[ [ [
IMAGEHEIGHT imageheight IMAGEHEIGHT
] ] ]
[ [ [
IMAGEWIDTH imagewidth IMAGEWIDTH
] ] ]
; ; ;
int int int
Laplace laplac Laplace
_ _ _
Op op Op
1 1 1
[ [ [
3 3 3
] ] ]
[ [ [
3 3 3
] ] ]
= = =
{ { {
0 0 0
, , ,
- - -
1 1 1
, , ,
0 0 0
, , ,
- - -
1 1 1
, , ,
4 4 4
, , ,
- - -
1 1 1
, , ,
0 0 0
, , ,
- - -
1 1 1
, , ,
0 0 0
} } }
; ; ;
int int int
Compass compass Compass
_ _ _
Op op Op
1 1 1
[ [ [
3 3 3
] ] ]
[ [ [
3 3 3
] ] ]
= = =
{ { {
1 1 1
, , ,
1 1 1
, , ,
1 1 1
, , ,
0 0 0
, , ,
0 0 0
, , ,
0 0 0
, , ,
- - -
1 1 1
, , ,
- - -
1 1 1
, , ,
- - -
1 1 1
} } }
; ; ;
int int int
Compass compass Compass
_ _ _
Op op Op
2 2 2
[ [ [
3 3 3
] ] ]
[ [ [
3 3 3
] ] ]
= = =
{ { {
1 1 1
, , ,
1 1 1
, , ,
0 0 0
, , ,
1 1 1
, , ,
0 0 0
, , ,
- - -
1 1 1
, , ,
0 0 0
, , ,
- - -
1 1 1
, , ,
- - -
1 1 1
} } }
; ; ;
int int int
Compass compass Compass
_ _ _
Op op Op
3 3 3
[ [ [
3 3 3
] ] ]
[ [ [
3 3 3
] ] ]
= = =
{ { {
1 1 1
, , ,
0 0 0
, , ,
- - -
1 1 1
, , ,
1 1 1
, , ,
0 0 0
, , ,
- - -
1 1 1
, , ,
1 1 1
, , ,
0 0 0
, , ,
- - -
1 1 1
} } }
; ; ;
int int int
Compass compass Compass
_ _ _
Op op Op
4 4 4
[ [ [
3 3 3
] ] ]
[ [ [
3 3 3
] ] ]
= = =
{ { {
0 0 0
, , ,
- - -
1 1 1
, , ,
- - -
1 1 1
, , ,
1 1 1
, , ,
0 0 0
, , ,
- - -
1 1 1
, , ,
1 1 1
, , ,
1 1 1
, , ,
0 0 0
} } }
; ; ;
int int int
Compass compass Compass
_ _ _
Op op Op
5 5 5
[ [ [
3 3 3
] ] ]
[ [ [
3 3 3
] ] ]
= = =
{ { {
- - -
1 1 1
, , ,
- - -
1 1 1
, , ,
- - -
1 1 1
, , ,
0 0 0
, , ,
0 0 0
, , ,
0 0 0
, , ,
1 1 1
, , ,
1 1 1
, , ,
1 1 1
} } }
; ; ;
int int int
Compass compass Compass
_ _ _
Op op Op
6 6 6
[ [ [
3 3 3
] ] ]
[ [ [
3 3 3
] ] ]
= = =
{ { {
- - -
1 1 1
, , ,
- - -
1 1 1
, , ,
0 0 0
, , ,
- - -
1 1 1
, , ,
0 0 0
, , ,
1 1 1
, , ,
0 0 0
, , ,
1 1 1
, , ,
1 1 1
} } }
; ; ;
int int int
Compass compass Compass
_ _ _
Op op Op
7 7 7
[ [ [
3 3 3
] ] ]
[ [ [
3 3 3
] ] ]
= = =
{ { {
- - -
1 1 1
, , ,
0 0 0
, , ,
1 1 1
, , ,
- - -
1 1 1
, , ,
0 0 0
, , ,
1 1 1
, , ,
- - -
1 1 1
, , ,
0 0 0
, , ,
1 1 1
} } }
; ; ;
int int int
Compass compass Compass
_ _ _
Op op Op
8 8 8
[ [ [
3 3 3
] ] ]
[ [ [
3 3 3
] ] ]
= = =
{ { {
0 0 0
, , ,
1 1 1
, , ,
1 1 1
, , ,
- - -
1 1 1
, , ,
0 0 0
, , ,
1 1 1
, , ,
- - -
1 1 1
, , ,
- - -
1 1 1
, , ,
0 0 0
} } }
; ; ;
void void void
Compass compass Compass
( ( (
row row row
, , ,
col col col
) ) )
int int int
row row row
, , ,
col col col
; ; ;
{ { {
int int int
value valu value
; ; ;
int int int
op op op
_ _ _
rows row row
, , ,
op op op
_ _ _
cols col col
; ; ;
int int int
Compass compass Compass
1 1 1
, , ,
Compass compass Compass
2 2 2
, , ,
Compass compass Compass
3 3 3
, , ,
Compass compass Compass
4 4 4
; ; ;
int int int
Compass compass Compass
5 5 5
, , ,
Compass compass Compass
6 6 6
, , ,
Compass compass Compass
7 7 7
, , ,
Compass compass Compass
8 8 8
; ; ;
Compass compass Compass
1 1 1
= = =
Compass compass Compass
2 2 2
= = =
Compass compass Compass
3 3 3
= = =
Compass compass Compass
4 4 4
= = =
0 0 0
; ; ;
Compass compass Compass
5 5 5
= = =
Compass compass Compass
6 6 6
= = =
Compass compass Compass
7 7 7
= = =
Compass compass Compass
8 8 8
= = =
0 0 0
; ; ;
for for for
( ( (
op op op
_ _ _
rows row row
= = =
- - -
1 1 1
; ; ;
op op op
_ _ _
rows row row
< < <
2 2 2
; ; ;
op op op
_ _ _
rows row row
+ + +
+ + +
) ) )
for for for
( ( (
op op op
_ _ _
cols col col
= = =
- - -
1 1 1
; ; ;
op op op
_ _ _
cols col col
< < <
2 2 2
; ; ;
op op op
_ _ _
cols col col
+ + +
+ + +
) ) )
{ { {
if if if
( ( (
( ( (
( ( (
row row row
+ + +
op op op
_ _ _
rows row row
) ) )
> > >
= = =
0 0 0
) ) )
& & &
& & &
( ( (
( ( (
col col col
+ + +
op op op
_ _ _
cols col col
) ) )
> > >
= = =
0 0 0
) ) )
) ) )
{ { {
Compass compass Compass
1 1 1
+ + +
= = =
( ( (
( ( (
int int int
) ) )
Input input Input
_ _ _
Image imag Image
[ [ [
row row row
+ + +
op op op
_ _ _
rows row row
] ] ]
[ [ [
col col col
+ + +
op op op
_ _ _
cols col col
] ] ]
) ) )
* * *
Compass compass Compass
_ _ _
Op op Op
1 1 1
[ [ [
op op op
_ _ _
rows row row
+ + +
1 1 1
] ] ]
[ [ [
op op op
_ _ _
cols col col
+ + +
1 1 1
] ] ]
; ; ;
Compass compass Compass
2 2 2
+ + +
= = =
( ( (
( ( (
int int int
) ) )
Input input Input
_ _ _
Image imag Image
[ [ [
row row row
+ + +
op op op
_ _ _
rows row row
] ] ]
[ [ [
col col col
+ + +
op op op
_ _ _
cols col col
] ] ]
) ) )
* * *
Compass compass Compass
_ _ _
Op op Op
2 2 2
[ [ [
op op op
_ _ _
rows row row
+ + +
1 1 1
] ] ]
[ [ [
op op op
_ _ _
cols col col
+ + +
1 1 1
] ] ]
; ; ;
Compass compass Compass
3 3 3
+ + +
= = =
( ( (
( ( (
int int int
) ) )
Input input Input
_ _ _
Image imag Image
[ [ [
row row row
+ + +
op op op
_ _ _
rows row row
] ] ]
[ [ [
col col col
+ + +
op op op
_ _ _
cols col col
] ] ]
) ) )
* * *
Compass compass Compass
_ _ _
Op op Op
3 3 3
[ [ [
op op op
_ _ _
rows row row
+ + +
1 1 1
] ] ]
[ [ [
op op op
_ _ _
cols col col
+ + +
1 1 1
] ] ]
; ; ;
Compass compass Compass
4 4 4
+ + +
= = =
( ( (
( ( (
int int int
) ) )
Input input Input
_ _ _
Image imag Image
[ [ [
row row row
+ + +
op op op
_ _ _
rows row row
] ] ]
[ [ [
col col col
+ + +
op op op
_ _ _
cols col col
] ] ]
) ) )
* * *
Compass compass Compass
_ _ _
Op op Op
4 4 4
[ [ [
op op op
_ _ _
rows row row
+ + +
1 1 1
] ] ]
[ [ [
op op op
_ _ _
cols col col
+ + +
1 1 1
] ] ]
; ; ;
Compass compass Compass
5 5 5
+ + +
= = =
( ( (
( ( (
int int int
) ) )
Input input Input
_ _ _
Image imag Image
[ [ [
row row row
+ + +
op op op
_ _ _
rows row row
] ] ]
[ [ [
col col col
+ + +
op op op
_ _ _
cols col col
] ] ]
) ) )
* * *
Compass compass Compass
_ _ _
Op op Op
5 5 5
[ [ [
op op op
_ _ _
rows row row
+ + +
1 1 1
] ] ]
[ [ [
op op op
_ _ _
cols col col
+ + +
1 1 1
] ] ]
; ; ;
Compass compass Compass
6 6 6
+ + +
= = =
( ( (
( ( (
int int int
) ) )
Input input Input
_ _ _
Image imag Image
[ [ [
row row row
+ + +
op op op
_ _ _
rows row row
] ] ]
[ [ [
col col col
+ + +
op op op
_ _ _
cols col col
] ] ]
) ) )
* * *
Compass compass Compass
_ _ _
Op op Op
6 6 6
[ [ [
op op op
_ _ _
rows row row
+ + +
1 1 1
] ] ]
[ [ [
op op op
_ _ _
cols col col
+ + +
1 1 1
] ] ]
; ; ;
Compass compass Compass
7 7 7
+ + +
= = =
( ( (
( ( (
int int int
) ) )
Input input Input
_ _ _
Image imag Image
[ [ [
row row row
+ + +
op op op
_ _ _
rows row row
] ] ]
[ [ [
col col col
+ + +
op op op
_ _ _
cols col col
] ] ]
) ) )
* * *
Compass compass Compass
_ _ _
Op op Op
7 7 7
[ [ [
op op op
_ _ _
rows row row
+ + +
1 1 1
] ] ]
[ [ [
op op op
_ _ _
cols col col
+ + +
1 1 1
] ] ]
; ; ;
Compass compass Compass
8 8 8
+ + +
= = =
( ( (
( ( (
int int int
) ) )
Input input Input
_ _ _
Image imag Image
[ [ [
row row row
+ + +
op op op
_ _ _
rows row row
] ] ]
[ [ [
col col col
+ + +
op op op
_ _ _
cols col col
] ] ]
) ) )
* * *
Compass compass Compass
_ _ _
Op op Op
8 8 8
[ [ [
op op op
_ _ _
rows row row
+ + +
1 1 1
] ] ]
[ [ [
op op op
_ _ _
cols col col
+ + +
1 1 1
] ] ]
; ; ;
} } }
} } }
if if if
( ( (
Compass compass Compass
1 1 1
< < <
Compass compass Compass
2 2 2
) ) )
value valu value
= = =
Compass compass Compass
2 2 2
; ; ;
else els else
value valu value
= = =
Compass compass Compass
1 1 1
; ; ;
if if if
( ( (
value valu value
< < <
Compass compass Compass
3 3 3
) ) )
value valu value
= = =
Compass compass Compass
3 3 3
; ; ;
if if if
( ( (
value valu value
< < <
Compass compass Compass
4 4 4
) ) )
value valu value
= = =
Compass compass Compass
4 4 4
; ; ;
if if if
( ( (
value valu value
< < <
Compass compass Compass
5 5 5
) ) )
value valu value
= = =
Compass compass Compass
5 5 5
; ; ;
if if if
( ( (
value valu value
< < <
Compass compass Compass
6 6 6
) ) )
value valu value
= = =
Compass compass Compass
6 6 6
; ; ;
if if if
( ( (
value valu value
< < <
Compass compass Compass
7 7 7
) ) )
value valu value
= = =
Compass compass Compass
7 7 7
; ; ;
if if if
( ( (
value valu value
< < <
Compass compass Compass
8 8 8
) ) )
value valu value
= = =
Compass compass Compass
8 8 8
; ; ;
Magnitude magnitud Magnitude
_ _ _
Image imag Image
[ [ [
row row row
] ] ]
[ [ [
col col col
] ] ]
= = =
( ( (
char char char
) ) )
value valu value
; ; ;
} } }
void void void
Laplace laplac Laplace
1 1 1
( ( (
row row row
, , ,
col col col
) ) )
int int int
row row row
, , ,
col col col
; ; ;
{ { {
int int int
op op op
_ _ _
rows row row
, , ,
op op op
_ _ _
cols col col
; ; ;
Magnitude magnitud Magnitude
_ _ _
Image imag Image
[ [ [
row row row
] ] ]
[ [ [
col col col
] ] ]
= = =
0 0 0
; ; ;
for for for
( ( (
op op op
_ _ _
rows row row
= = =
- - -
1 1 1
; ; ;
op op op
_ _ _
rows row row
< < <
2 2 2
; ; ;
op op op
_ _ _
rows row row
+ + +
+ + +
) ) )
for for for
( ( (
op op op
_ _ _
cols col col
= = =
- - -
1 1 1
; ; ;
op op op
_ _ _
cols col col
< < <
2 2 2
; ; ;
op op op
_ _ _
cols col col
+ + +
+ + +
) ) )
if if if
( ( (
( ( (
( ( (
row row row
+ + +
op op op
_ _ _
rows row row
) ) )
> > >
= = =
0 0 0
) ) )
& & &
& & &
( ( (
( ( (
col col col
+ + +
op op op
_ _ _
cols col col
) ) )
> > >
= = =
0 0 0
) ) )
) ) )
Magnitude magnitud Magnitude
_ _ _
Image imag Image
[ [ [
row row row
] ] ]
[ [ [
col col col
] ] ]
= = =
( ( (
char char char
) ) )
( ( (
( ( (
int int int
) ) )
Magnitude magnitud Magnitude
_ _ _
Image imag Image
[ [ [
row row row
] ] ]
[ [ [
col col col
] ] ]
+ + +
( ( (
( ( (
int int int
) ) )
Input input Input
_ _ _
Image imag Image
[ [ [
row row row
+ + +
op op op
_ _ _
rows row row
] ] ]
[ [ [
col col col
+ + +
op op op
_ _ _
cols col col
] ] ]
* * *
Laplace laplac Laplace
_ _ _
Op op Op
1 1 1
[ [ [
op op op
_ _ _
rows row row
+ + +
1 1 1
] ] ]
[ [ [
op op op
_ _ _
cols col col
+ + +
1 1 1
] ] ]
) ) )
) ) )
; ; ;
} } }
main main main
( ( (
) ) )
{ { {
FILE file FILE
* * *
Original origin Original
_ _ _
Image imag Image
_ _ _
fp fp fp
; ; ;
FILE file FILE
* * *
Laplace laplac Laplace
1 1 1
_ _ _
mag mag mag
_ _ _
fp fp fp
, , ,
* * *
Laplace laplac Laplace
2 2 2
_ _ _
mag mag mag
_ _ _
fp fp fp
, , ,
* * *
Laplace laplac Laplace
3 3 3
_ _ _
mag mag mag
_ _ _
fp fp fp
; ; ;
FILE file FILE
* * *
Compass compass Compass
_ _ _
mag mag mag
_ _ _
fp fp fp
; ; ;
int int int
row row row
, , ,
col col col
, , ,
Algo algo Algo
_ _ _
Count count Count
; ; ;
Original origin Original
_ _ _
Image imag Image
_ _ _
fp fp fp
= = =
fopen fopen fopen
( ( (
" " "
INPUT input INPUT
. . .
IMAGE imag IMAGE
" " "
, , ,
" " "
rb rb rb
" " "
) ) )
; ; ;
Laplace laplac Laplace
1 1 1
_ _ _
mag mag mag
_ _ _
fp fp fp
= = =
fopen fopen fopen
( ( (
" " "
Laplace laplac Laplace
1 1 1
_ _ _
Magnitude magnitud Magnitude
" " "
, , ,
" " "
wb wb wb
" " "
) ) )
; ; ;
Compass compass Compass
_ _ _
mag mag mag
_ _ _
fp fp fp
= = =
fopen fopen fopen
( ( (
" " "
Compass compass Compass
_ _ _
Magnitude magnitud Magnitude
" " "
, , ,
" " "
wb wb wb
" " "
) ) )
; ; ;
fread fread fread
( ( (
( ( (
unsigned unsign unsigned
char char char
* * *
) ) )
Input input Input
_ _ _
Image imag Image
, , ,
sizeof sizeof sizeof
( ( (
unsigned unsign unsigned
char char char
) ) )
, , ,
IMAGEHEIGHT imageheight IMAGEHEIGHT
* * *
IMAGEWIDTH imagewidth IMAGEWIDTH
, , ,
Original origin Original
_ _ _
Image imag Image
_ _ _
fp fp fp
) ) )
; ; ;
for for for
( ( (
Algo algo Algo
_ _ _
Count count Count
= = =
0 0 0
; ; ;
Algo algo Algo
_ _ _
Count count Count
< < <
2 2 2
; ; ;
Algo algo Algo
_ _ _
Count count Count
+ + +
+ + +
) ) )
{ { {
for for for
( ( (
row row row
= = =
0 0 0
; ; ;
row row row
< < <
IMAGEHEIGHT imageheight IMAGEHEIGHT
; ; ;
row row row
+ + +
+ + +
) ) )
for for for
( ( (
col col col
= = =
0 0 0
; ; ;
col col col
< < <
IMAGEWIDTH imagewidth IMAGEWIDTH
; ; ;
col col col
+ + +
+ + +
) ) )
if if if
( ( (
! ! !
Algo algo Algo
_ _ _
Count count Count
) ) )
Laplace laplac Laplace
1 1 1
( ( (
row row row
, , ,
col col col
) ) )
; ; ;
else els else
Compass compass Compass
( ( (
row row row
, , ,
col col col
) ) )
; ; ;
if if if
( ( (
! ! !
Algo algo Algo
_ _ _
Count count Count
) ) )
fwrite fwrite fwrite
( ( (
Magnitude magnitud Magnitude
_ _ _
Image imag Image
, , ,
sizeof sizeof sizeof
( ( (
char char char
) ) )
, , ,
IMAGEHEIGHT imageheight IMAGEHEIGHT
* * *
IMAGEWIDTH imagewidth IMAGEWIDTH
, , ,
Laplace laplac Laplace
1 1 1
_ _ _
mag mag mag
_ _ _
fp fp fp
) ) )
; ; ;
else els else
fwrite fwrite fwrite
( ( (
Magnitude magnitud Magnitude
_ _ _
Image imag Image
, , ,
sizeof sizeof sizeof
( ( (
char char char
) ) )
, , ,
IMAGEHEIGHT imageheight IMAGEHEIGHT
* * *
IMAGEWIDTH imagewidth IMAGEWIDTH
, , ,
Compass compass Compass
_ _ _
mag mag mag
_ _ _
fp fp fp
) ) )
; ; ;
} } }
} } }
- - -
- - -
| | |
. . .
- - -
, , ,
# # #
# # #
# # #
| | |
For for For
a a a
lot lot lot
of of of
. . .
au au au
music music music
: : :
ftp ftp ftp
sounds sound sound
. . .
sdsu sdsu sdsu
. . .
edu edu edu
| | |
/ / /
/ / /
_ _ _
_ _ _
, , ,
_ _ _
# # #
# # #
# # #
| | |
then then then
cat cat cat
file file file
. . .
au au au
> > >
/ / /
dev dev dev
/ / /
audio audio audio
| | |
\ \ \
_ _ _
> > >
/ / /
> > >
_ _ _
/ / /
( ( (
_ _ _
/ / /
\ \ \
_ _ _
/ / /
< < <
> > >
_ _ _
| | |
UB ub UB
library librari library
catalog catalog catalog
: : :
telnet telnet telnet
bison bison bison
. . .
acsu acsu acsu
. . .
buffalo buffalo buffalo
. . .
edu edu edu
| | |
_ _ _
14261 14261 14261
_ _ _
| | |
( ( (
When when When
in in in
doubt doubt doubt
ask ask ask
: : :
xarchie xarchi xarchie
, , ,
xgopher xgopher xgopher
, , ,
or or or
xwais xwai xwais
. . .
) ) )
