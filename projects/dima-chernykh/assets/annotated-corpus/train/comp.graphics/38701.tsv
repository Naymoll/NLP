From from From
: : :
spl spl spl
@ @ @
dim dim dim
. . .
ucsd ucsd ucsd
. . .
edu edu edu
( ( (
Steve steve Steve
Lamont lamont Lamont
) ) )
Subject subject Subject
: : :
Re re Re
: : :
Finding find Finding
equally equal equally
spaced space space
points point point
on on on
a a a
sphere sphere sphere
. . .
Organization organ Organization
: : :
University univers University
of of of
Calif calif Calif
. . .
, , ,
San san San
Diego diego Diego
/ / /
Microscopy microscopi Microscopy
and and and
Imaging imag Imaging
Resource resourc Resource
Lines line Lines
: : :
326 326 326
NNTP nntp NNTP
- - -
Posting post Posting
- - -
Host host Host
: : :
dim dim dim
. . .
ucsd ucsd ucsd
. . .
edu edu edu
In in In
article articl article
< < <
4615 4615 4615
trd trd trd
@ @ @
rpi rpi rpi
. . .
edu edu edu
> > >
deweeset deweeset deweeset
@ @ @
ptolemy ptolemi ptolemy
2 2 2
. . .
rdrc rdrc rdrc
. . .
rpi rpi rpi
. . .
edu edu edu
( ( (
Thomas thoma Thomas
E e E
. . .
DeWeese dewees DeWeese
) ) )
writes write write
: : :
> > >
Hello hello Hello
, , ,
I i I
know know know
that that that
this this this
has has have
been been be
discussed discuss discuss
before befor before
. . .
But but But
at at at
the the the
time time time
> > >
I i I
didn didn didn
' ' '
t t t
need need need
to to to
teselate tesel teselate
a a a
sphere sphere sphere
. . .
So so So
if if if
any ani any
kind kind kind
soul soul soul
has has have
the the the
code code code
> > >
or or or
the the the
alg alg alg
, , ,
that that that
was was be
finally final finally
decided decid decide
upon upon upon
as as a
the the the
best best best
( ( (
as as a
I i I
recall recal recall
it it it
> > >
was was be
a a a
nice nice nice
, , ,
iterative iter iterative
subdivision subdivis subdivision
meathod meathod meathod
) ) )
, , ,
I i I
would would would
be be be
very veri very
> > >
appreciative appreci appreciative
. . .
Here here Here
is is be
one one one
by by by
Andrew andrew Andrew
" " "
Graphics graphic Graphics
Gems gem Gems
" " "
Glassner glassner Glassner
that that that
I i I
got got get
from from from
a a a
collegue collegu collegue
of of of
mine mine mine
. . .
I i I
think think think
I i I
fiddled fiddl fiddle
with with with
it it it
a a a
little littl little
bit bit bit
to to to
make make make
it it it
deal deal deal
with with with
whatever whatev whatever
bizarre bizarr bizarre
problem problem problem
I i I
was was be
working work work
on on on
at at at
the the the
time time time
but but but
it it it
is is be
known known know
to to to
work work work
. . .
spl spl spl
- - -
- - -
- - -
- - -
/ / /
* * *
spheres sphere sphere
ASG asg ASG
9 9 9
Feb feb Feb
85 85 85
spl spl spl
Thu thu Thu
Mar mar Mar
8 8 8
17 17 17
: : :
17 17 17
: : :
40 40 40
EST est EST
1990 1990 1990
* * *
/ / /
# # #
include includ include
< < <
stdio stdio stdio
. . .
h h h
> > >
# # #
include includ include
< < <
math math math
. . .
h h h
> > >
# # #
define defin define
PI pi PI
3 3 3
. . .
141592654 141592654 141592654
struct struct struct
Point point Point
_ _ _
struct struct struct
{ { {
double doubl double
x x x
, , ,
y y y
, , ,
z z z
; ; ;
} } }
; ; ;
static static static
double doubl double
radius radius radius
; ; ;
static static static
double doubl double
xorg xorg xorg
; ; ;
static static static
double doubl double
yorg yorg yorg
; ; ;
static static static
double doubl double
zorg zorg zorg
; ; ;
do do do
_ _ _
sphere sphere sphere
( ( (
r r r
, , ,
freq freq freq
, , ,
x x x
, , ,
y y y
, , ,
z z z
) ) )
double doubl double
r r r
; ; ;
int int int
freq freq freq
; ; ;
double doubl double
x x x
; ; ;
double doubl double
y y y
; ; ;
double doubl double
z z z
; ; ;
{ { {
int int int
pole pole pole
; ; ;
double doubl double
northy northi northy
, , ,
southy southi southy
, , ,
poley poley poley
; ; ;
double doubl double
rtheta rtheta rtheta
, , ,
rtheta rtheta rtheta
2 2 2
, , ,
ntheta ntheta ntheta
, , ,
ntheta ntheta ntheta
2 2 2
, , ,
magicangle magicangl magicangle
; ; ;
double doubl double
theta theta theta
, , ,
thetastart thetastart thetastart
, , ,
thisy thisi thisy
, , ,
den den den
, , ,
t t t
; ; ;
struct struct struct
Point point Point
_ _ _
node node node
* * *
pnp pnp pnp
; ; ;
struct struct struct
Point point Point
_ _ _
struct struct struct
p p p
1 1 1
, , ,
p p p
2 2 2
, , ,
p p p
3 3 3
, , ,
p p p
4 4 4
, , ,
n n n
1 1 1
, , ,
n n n
2 2 2
, , ,
n n n
3 3 3
, , ,
n n n
4 4 4
, , ,
pt pt pt
; ; ;
radius radius radius
= = =
r r r
; ; ;
xorg xorg xorg
= = =
x x x
; ; ;
yorg yorg yorg
= = =
y y y
; ; ;
zorg zorg zorg
= = =
z z z
; ; ;
/ / /
* * *
north north north
pole pole pole
* * *
/ / /
magicangle magicangl magicangle
= = =
30 30 30
. . .
0 0 0
* * *
PI pi PI
/ / /
180 180 180
. . .
0 0 0
; ; ;
northy northi northy
= = =
radius radius radius
* * *
sin sin sin
( ( (
magicangle magicangl magicangle
) ) )
; ; ;
southy southi southy
= = =
- - -
radius radius radius
* * *
sin sin sin
( ( (
magicangle magicangl magicangle
) ) )
; ; ;
for for for
( ( (
pole pole pole
= = =
0 0 0
; ; ;
pole pole pole
< < <
2 2 2
; ; ;
pole pole pole
+ + +
+ + +
) ) )
{ { {
if if if
( ( (
pole pole pole
= = =
= = =
0 0 0
) ) )
{ { {
poley poley poley
= = =
radius radius radius
; ; ;
thisy thisi thisy
= = =
northy northi northy
; ; ;
thetastart thetastart thetastart
= = =
0 0 0
. . .
0 0 0
; ; ;
} } }
else els else
{ { {
poley poley poley
= = =
- - -
radius radius radius
; ; ;
thisy thisi thisy
= = =
southy southi southy
; ; ;
thetastart thetastart thetastart
= = =
36 36 36
. . .
0 0 0
; ; ;
} } }
for for for
( ( (
theta theta theta
= = =
thetastart thetastart thetastart
; ; ;
theta theta theta
< < <
360 360 360
. . .
0 0 0
; ; ;
theta theta theta
+ + +
= = =
60 60 60
. . .
0 0 0
) ) )
{ { {
rtheta rtheta rtheta
= = =
theta theta theta
* * *
PI pi PI
/ / /
180 180 180
. . .
0 0 0
; ; ;
rtheta rtheta rtheta
2 2 2
= = =
( ( (
theta theta theta
+ + +
60 60 60
. . .
0 0 0
) ) )
* * *
PI pi PI
/ / /
180 180 180
. . .
0 0 0
; ; ;
p p p
1 1 1
. . .
x x x
= = =
0 0 0
. . .
0 0 0
; ; ;
p p p
1 1 1
. . .
y y y
= = =
poley poley poley
; ; ;
p p p
1 1 1
. . .
z z z
= = =
0 0 0
. . .
0 0 0
; ; ;
p p p
2 2 2
. . .
x x x
= = =
radius radius radius
* * *
cos cos co
( ( (
rtheta rtheta rtheta
) ) )
; ; ;
p p p
2 2 2
. . .
y y y
= = =
thisy thisi thisy
; ; ;
p p p
2 2 2
. . .
z z z
= = =
radius radius radius
* * *
sin sin sin
( ( (
rtheta rtheta rtheta
) ) )
; ; ;
p p p
3 3 3
. . .
x x x
= = =
radius radius radius
* * *
cos cos co
( ( (
rtheta rtheta rtheta
2 2 2
) ) )
; ; ;
p p p
3 3 3
. . .
y y y
= = =
thisy thisi thisy
; ; ;
p p p
3 3 3
. . .
z z z
= = =
radius radius radius
* * *
sin sin sin
( ( (
rtheta rtheta rtheta
2 2 2
) ) )
; ; ;
if if if
( ( (
pole pole pole
= = =
= = =
0 0 0
) ) )
{ { {
/ / /
* * *
make make make
ring ring ring
go go go
the the the
other other other
way way way
so so so
normals normal normal
are are be
right right right
* * *
/ / /
pt pt pt
. . .
x x x
= = =
p p p
3 3 3
. . .
x x x
; ; ;
pt pt pt
. . .
y y y
= = =
p p p
3 3 3
. . .
y y y
; ; ;
pt pt pt
. . .
z z z
= = =
p p p
3 3 3
. . .
z z z
; ; ;
p p p
3 3 3
. . .
x x x
= = =
p p p
2 2 2
. . .
x x x
; ; ;
p p p
3 3 3
. . .
y y y
= = =
p p p
2 2 2
. . .
y y y
; ; ;
p p p
3 3 3
. . .
z z z
= = =
p p p
2 2 2
. . .
z z z
; ; ;
p p p
2 2 2
. . .
x x x
= = =
pt pt pt
. . .
x x x
; ; ;
p p p
2 2 2
. . .
y y y
= = =
pt pt pt
. . .
y y y
; ; ;
p p p
2 2 2
. . .
z z z
= = =
pt pt pt
. . .
z z z
; ; ;
} } }
den den den
= = =
( ( (
p p p
1 1 1
. . .
x x x
* * *
p p p
1 1 1
. . .
x x x
) ) )
+ + +
( ( (
p p p
1 1 1
. . .
y y y
* * *
p p p
1 1 1
. . .
y y y
) ) )
+ + +
( ( (
p p p
1 1 1
. . .
z z z
* * *
p p p
1 1 1
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
1 1 1
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
1 1 1
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
1 1 1
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
den den den
= = =
( ( (
p p p
2 2 2
. . .
x x x
* * *
p p p
2 2 2
. . .
x x x
) ) )
+ + +
( ( (
p p p
2 2 2
. . .
y y y
* * *
p p p
2 2 2
. . .
y y y
) ) )
+ + +
( ( (
p p p
2 2 2
. . .
z z z
* * *
p p p
2 2 2
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
2 2 2
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
2 2 2
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
2 2 2
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
den den den
= = =
( ( (
p p p
3 3 3
. . .
x x x
* * *
p p p
3 3 3
. . .
x x x
) ) )
+ + +
( ( (
p p p
3 3 3
. . .
y y y
* * *
p p p
3 3 3
. . .
y y y
) ) )
+ + +
( ( (
p p p
3 3 3
. . .
z z z
* * *
p p p
3 3 3
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
3 3 3
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
3 3 3
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
3 3 3
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
subdivide subdivid subdivide
_ _ _
tri tri tri
( ( (
& & &
p p p
1 1 1
, , ,
& & &
p p p
2 2 2
, , ,
& & &
p p p
3 3 3
, , ,
freq freq freq
) ) )
; ; ;
} } }
} } }
/ / /
* * *
now now now
the the the
body bodi body
* * *
/ / /
for for for
( ( (
theta theta theta
= = =
0 0 0
. . .
0 0 0
; ; ;
theta theta theta
< < <
360 360 360
. . .
0 0 0
; ; ;
theta theta theta
+ + +
= = =
60 60 60
. . .
0 0 0
) ) )
{ { {
rtheta rtheta rtheta
= = =
theta theta theta
* * *
PI pi PI
/ / /
180 180 180
. . .
0 0 0
; ; ;
rtheta rtheta rtheta
2 2 2
= = =
( ( (
theta theta theta
+ + +
60 60 60
. . .
0 0 0
) ) )
* * *
PI pi PI
/ / /
180 180 180
. . .
0 0 0
; ; ;
ntheta ntheta ntheta
= = =
( ( (
theta theta theta
+ + +
36 36 36
. . .
0 0 0
) ) )
* * *
PI pi PI
/ / /
180 180 180
. . .
0 0 0
; ; ;
ntheta ntheta ntheta
2 2 2
= = =
( ( (
theta theta theta
+ + +
96 96 96
. . .
0 0 0
) ) )
* * *
PI pi PI
/ / /
180 180 180
. . .
0 0 0
; ; ;
p p p
1 1 1
. . .
x x x
= = =
radius radius radius
* * *
cos cos co
( ( (
rtheta rtheta rtheta
) ) )
; ; ;
p p p
1 1 1
. . .
y y y
= = =
northy northi northy
; ; ;
p p p
1 1 1
. . .
z z z
= = =
radius radius radius
* * *
sin sin sin
( ( (
rtheta rtheta rtheta
) ) )
; ; ;
p p p
2 2 2
. . .
x x x
= = =
radius radius radius
* * *
cos cos co
( ( (
rtheta rtheta rtheta
2 2 2
) ) )
; ; ;
p p p
2 2 2
. . .
y y y
= = =
northy northi northy
; ; ;
p p p
2 2 2
. . .
z z z
= = =
radius radius radius
* * *
sin sin sin
( ( (
rtheta rtheta rtheta
2 2 2
) ) )
; ; ;
p p p
3 3 3
. . .
x x x
= = =
radius radius radius
* * *
cos cos co
( ( (
ntheta ntheta ntheta
) ) )
; ; ;
p p p
3 3 3
. . .
y y y
= = =
southy southi southy
; ; ;
p p p
3 3 3
. . .
z z z
= = =
radius radius radius
* * *
sin sin sin
( ( (
ntheta ntheta ntheta
) ) )
; ; ;
p p p
4 4 4
. . .
x x x
= = =
radius radius radius
* * *
cos cos co
( ( (
ntheta ntheta ntheta
2 2 2
) ) )
; ; ;
p p p
4 4 4
. . .
y y y
= = =
southy southi southy
; ; ;
p p p
4 4 4
. . .
z z z
= = =
radius radius radius
* * *
sin sin sin
( ( (
ntheta ntheta ntheta
2 2 2
) ) )
; ; ;
den den den
= = =
( ( (
p p p
1 1 1
. . .
x x x
* * *
p p p
1 1 1
. . .
x x x
) ) )
+ + +
( ( (
p p p
1 1 1
. . .
y y y
* * *
p p p
1 1 1
. . .
y y y
) ) )
+ + +
( ( (
p p p
1 1 1
. . .
z z z
* * *
p p p
1 1 1
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
1 1 1
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
1 1 1
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
1 1 1
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
den den den
= = =
( ( (
p p p
2 2 2
. . .
x x x
* * *
p p p
2 2 2
. . .
x x x
) ) )
+ + +
( ( (
p p p
2 2 2
. . .
y y y
* * *
p p p
2 2 2
. . .
y y y
) ) )
+ + +
( ( (
p p p
2 2 2
. . .
z z z
* * *
p p p
2 2 2
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
2 2 2
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
2 2 2
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
2 2 2
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
den den den
= = =
( ( (
p p p
3 3 3
. . .
x x x
* * *
p p p
3 3 3
. . .
x x x
) ) )
+ + +
( ( (
p p p
3 3 3
. . .
y y y
* * *
p p p
3 3 3
. . .
y y y
) ) )
+ + +
( ( (
p p p
3 3 3
. . .
z z z
* * *
p p p
3 3 3
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
3 3 3
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
3 3 3
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
3 3 3
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
den den den
= = =
( ( (
p p p
4 4 4
. . .
x x x
* * *
p p p
4 4 4
. . .
x x x
) ) )
+ + +
( ( (
p p p
4 4 4
. . .
y y y
* * *
p p p
4 4 4
. . .
y y y
) ) )
+ + +
( ( (
p p p
4 4 4
. . .
z z z
* * *
p p p
4 4 4
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
4 4 4
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
4 4 4
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
4 4 4
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
subdivide subdivid subdivide
_ _ _
tri tri tri
( ( (
& & &
p p p
1 1 1
, , ,
& & &
p p p
2 2 2
, , ,
& & &
p p p
3 3 3
, , ,
freq freq freq
) ) )
; ; ;
subdivide subdivid subdivide
_ _ _
tri tri tri
( ( (
& & &
p p p
3 3 3
, , ,
& & &
p p p
2 2 2
, , ,
& & &
p p p
4 4 4
, , ,
freq freq freq
) ) )
; ; ;
} } }
return return return
; ; ;
} } }
# # #
define defin define
norm norm norm
_ _ _
pt pt pt
( ( (
v v v
) ) )
{ { {
register regist register
double doubl double
r r r
= = =
sqrt sqrt sqrt
( ( (
( ( (
( ( (
v v v
) ) )
- - -
> > >
x x x
* * *
( ( (
v v v
) ) )
- - -
> > >
x x x
) ) )
+ + +
\ \ \
( ( (
( ( (
v v v
) ) )
- - -
> > >
y y y
* * *
( ( (
v v v
) ) )
- - -
> > >
y y y
) ) )
+ + +
\ \ \
( ( (
( ( (
v v v
) ) )
- - -
> > >
z z z
* * *
( ( (
v v v
) ) )
- - -
> > >
z z z
) ) )
) ) )
; ; ;
\ \ \
( ( (
v v v
) ) )
- - -
> > >
x x x
/ / /
= = =
r r r
; ; ;
\ \ \
( ( (
v v v
) ) )
- - -
> > >
y y y
/ / /
= = =
r r r
; ; ;
\ \ \
( ( (
v v v
) ) )
- - -
> > >
z z z
/ / /
= = =
r r r
; ; ;
\ \ \
} } }
subdivide subdivid subdivide
_ _ _
tri tri tri
( ( (
p p p
1 1 1
, , ,
p p p
2 2 2
, , ,
p p p
3 3 3
, , ,
a a a
) ) )
struct struct struct
Point point Point
_ _ _
struct struct struct
* * *
p p p
1 1 1
, , ,
* * *
p p p
2 2 2
, , ,
* * *
p p p
3 3 3
; ; ;
int int int
a a a
; ; ;
{ { {
struct struct struct
Point point Point
_ _ _
struct struct struct
n n n
1 1 1
, , ,
n n n
2 2 2
, , ,
n n n
3 3 3
; ; ;
struct struct struct
Point point Point
_ _ _
struct struct struct
p p p
12 12 12
, , ,
p p p
13 13 13
, , ,
p p p
23 23 23
; ; ;
double doubl double
den den den
, , ,
t t t
; ; ;
if if if
( ( (
a a a
> > >
0 0 0
) ) )
{ { {
p p p
12 12 12
. . .
x x x
= = =
( ( (
p p p
1 1 1
- - -
> > >
x x x
+ + +
p p p
2 2 2
- - -
> > >
x x x
) ) )
/ / /
2 2 2
. . .
0 0 0
; ; ;
p p p
12 12 12
. . .
y y y
= = =
( ( (
p p p
1 1 1
- - -
> > >
y y y
+ + +
p p p
2 2 2
- - -
> > >
y y y
) ) )
/ / /
2 2 2
. . .
0 0 0
; ; ;
p p p
12 12 12
. . .
z z z
= = =
( ( (
p p p
1 1 1
- - -
> > >
z z z
+ + +
p p p
2 2 2
- - -
> > >
z z z
) ) )
/ / /
2 2 2
. . .
0 0 0
; ; ;
den den den
= = =
( ( (
p p p
12 12 12
. . .
x x x
* * *
p p p
12 12 12
. . .
x x x
) ) )
+ + +
( ( (
p p p
12 12 12
. . .
y y y
* * *
p p p
12 12 12
. . .
y y y
) ) )
+ + +
( ( (
p p p
12 12 12
. . .
z z z
* * *
p p p
12 12 12
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
12 12 12
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
12 12 12
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
12 12 12
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
p p p
13 13 13
. . .
x x x
= = =
( ( (
p p p
1 1 1
- - -
> > >
x x x
+ + +
p p p
3 3 3
- - -
> > >
x x x
) ) )
/ / /
2 2 2
. . .
0 0 0
; ; ;
p p p
13 13 13
. . .
y y y
= = =
( ( (
p p p
1 1 1
- - -
> > >
y y y
+ + +
p p p
3 3 3
- - -
> > >
y y y
) ) )
/ / /
2 2 2
. . .
0 0 0
; ; ;
p p p
13 13 13
. . .
z z z
= = =
( ( (
p p p
1 1 1
- - -
> > >
z z z
+ + +
p p p
3 3 3
- - -
> > >
z z z
) ) )
/ / /
2 2 2
. . .
0 0 0
; ; ;
den den den
= = =
( ( (
p p p
13 13 13
. . .
x x x
* * *
p p p
13 13 13
. . .
x x x
) ) )
+ + +
( ( (
p p p
13 13 13
. . .
y y y
* * *
p p p
13 13 13
. . .
y y y
) ) )
+ + +
( ( (
p p p
13 13 13
. . .
z z z
* * *
p p p
13 13 13
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
13 13 13
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
13 13 13
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
13 13 13
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
p p p
23 23 23
. . .
x x x
= = =
( ( (
p p p
2 2 2
- - -
> > >
x x x
+ + +
p p p
3 3 3
- - -
> > >
x x x
) ) )
/ / /
2 2 2
. . .
0 0 0
; ; ;
p p p
23 23 23
. . .
y y y
= = =
( ( (
p p p
2 2 2
- - -
> > >
y y y
+ + +
p p p
3 3 3
- - -
> > >
y y y
) ) )
/ / /
2 2 2
. . .
0 0 0
; ; ;
p p p
23 23 23
. . .
z z z
= = =
( ( (
p p p
2 2 2
- - -
> > >
z z z
+ + +
p p p
3 3 3
- - -
> > >
z z z
) ) )
/ / /
2 2 2
. . .
0 0 0
; ; ;
den den den
= = =
( ( (
p p p
23 23 23
. . .
x x x
* * *
p p p
23 23 23
. . .
x x x
) ) )
+ + +
( ( (
p p p
23 23 23
. . .
y y y
* * *
p p p
23 23 23
. . .
y y y
) ) )
+ + +
( ( (
p p p
23 23 23
. . .
z z z
* * *
p p p
23 23 23
. . .
z z z
) ) )
; ; ;
den den den
= = =
sqrt sqrt sqrt
( ( (
den den den
) ) )
; ; ;
if if if
( ( (
den den den
! ! !
= = =
0 0 0
. . .
0 0 0
) ) )
{ { {
t t t
= = =
radius radius radius
/ / /
den den den
; ; ;
p p p
23 23 23
. . .
x x x
* * *
= = =
t t t
; ; ;
p p p
23 23 23
. . .
y y y
* * *
= = =
t t t
; ; ;
p p p
23 23 23
. . .
z z z
* * *
= = =
t t t
; ; ;
} } }
subdivide subdivid subdivide
_ _ _
tri tri tri
( ( (
p p p
1 1 1
, , ,
& & &
p p p
12 12 12
, , ,
& & &
p p p
13 13 13
, , ,
a a a
- - -
1 1 1
) ) )
; ; ;
subdivide subdivid subdivide
_ _ _
tri tri tri
( ( (
& & &
p p p
12 12 12
, , ,
p p p
2 2 2
, , ,
& & &
p p p
23 23 23
, , ,
a a a
- - -
1 1 1
) ) )
; ; ;
subdivide subdivid subdivide
_ _ _
tri tri tri
( ( (
& & &
p p p
13 13 13
, , ,
& & &
p p p
23 23 23
, , ,
p p p
3 3 3
, , ,
a a a
- - -
1 1 1
) ) )
; ; ;
subdivide subdivid subdivide
_ _ _
tri tri tri
( ( (
& & &
p p p
12 12 12
, , ,
& & &
p p p
23 23 23
, , ,
& & &
p p p
13 13 13
, , ,
a a a
- - -
1 1 1
) ) )
; ; ;
} } }
else els else
{ { {
n n n
1 1 1
. . .
x x x
= = =
p p p
1 1 1
- - -
> > >
x x x
; ; ;
n n n
1 1 1
. . .
y y y
= = =
p p p
1 1 1
- - -
> > >
y y y
; ; ;
n n n
1 1 1
. . .
z z z
= = =
p p p
1 1 1
- - -
> > >
z z z
; ; ;
norm norm norm
_ _ _
pt pt pt
( ( (
& & &
n n n
1 1 1
) ) )
; ; ;
n n n
2 2 2
. . .
x x x
= = =
p p p
2 2 2
- - -
> > >
x x x
; ; ;
n n n
2 2 2
. . .
y y y
= = =
p p p
2 2 2
- - -
> > >
y y y
; ; ;
n n n
2 2 2
. . .
z z z
= = =
p p p
2 2 2
- - -
> > >
z z z
; ; ;
norm norm norm
_ _ _
pt pt pt
( ( (
& & &
n n n
2 2 2
) ) )
; ; ;
n n n
3 3 3
. . .
x x x
= = =
p p p
3 3 3
- - -
> > >
x x x
; ; ;
n n n
3 3 3
. . .
y y y
= = =
p p p
3 3 3
- - -
> > >
y y y
; ; ;
n n n
3 3 3
. . .
z z z
= = =
p p p
3 3 3
- - -
> > >
z z z
; ; ;
norm norm norm
_ _ _
pt pt pt
( ( (
& & &
n n n
3 3 3
) ) )
; ; ;
/ / /
* * *
nothing noth nothing
special special special
about about about
this this this
poly poli poly
* * *
/ / /
printf printf printf
( ( (
" " "
% % %
f f f
% % %
f f f
% % %
f f f
% % %
f f f
% % %
f f f
% % %
f f f
\ \ \
n n n
" " "
, , ,
p p p
1 1 1
- - -
> > >
x x x
+ + +
xorg xorg xorg
, , ,
p p p
1 1 1
- - -
> > >
y y y
+ + +
yorg yorg yorg
, , ,
p p p
1 1 1
- - -
> > >
z z z
+ + +
zorg zorg zorg
, , ,
n n n
1 1 1
. . .
x x x
, , ,
n n n
1 1 1
. . .
y y y
, , ,
n n n
1 1 1
. . .
z z z
) ) )
; ; ;
printf printf printf
( ( (
" " "
% % %
f f f
% % %
f f f
% % %
f f f
% % %
f f f
% % %
f f f
% % %
f f f
\ \ \
n n n
" " "
, , ,
p p p
2 2 2
- - -
> > >
x x x
+ + +
xorg xorg xorg
, , ,
p p p
2 2 2
- - -
> > >
y y y
+ + +
yorg yorg yorg
, , ,
p p p
2 2 2
- - -
> > >
z z z
+ + +
zorg zorg zorg
, , ,
n n n
2 2 2
. . .
x x x
, , ,
n n n
2 2 2
. . .
y y y
, , ,
n n n
2 2 2
. . .
z z z
) ) )
; ; ;
printf printf printf
( ( (
" " "
% % %
f f f
% % %
f f f
% % %
f f f
% % %
f f f
% % %
f f f
% % %
f f f
\ \ \
n n n
" " "
, , ,
p p p
3 3 3
- - -
> > >
x x x
+ + +
xorg xorg xorg
, , ,
p p p
3 3 3
- - -
> > >
y y y
+ + +
yorg yorg yorg
, , ,
p p p
3 3 3
- - -
> > >
z z z
+ + +
zorg zorg zorg
, , ,
n n n
3 3 3
. . .
x x x
, , ,
n n n
3 3 3
. . .
y y y
, , ,
n n n
3 3 3
. . .
z z z
) ) )
; ; ;
} } }
return return return
; ; ;
} } }
- - -
- - -
Steve steve Steve
Lamont lamont Lamont
, , ,
SciViGuy sciviguy SciViGuy
- - -
- - -
( ( (
619 619 619
) ) )
534 534 534
- - -
7968 7968 7968
- - -
- - -
spl spl spl
@ @ @
szechuan szechuan szechuan
. . .
ucsd ucsd ucsd
. . .
edu edu edu
San san San
Diego diego Diego
Microscopy microscopi Microscopy
and and and
Imaging imag Imaging
Resource resourc Resource
/ / /
UC uc UC
San san San
Diego diego Diego
/ / /
La la La
Jolla jolla Jolla
, , ,
CA ca CA
92093 92093 92093
- - -
0608 0608 0608
" " "
My my My
other other other
car car car
is is be
a a a
car car car
, , ,
too too too
. . .
" " "
- - -
Bumper bumper Bumper
strip strip strip
seen seen see
on on on
I i I
- - -
805 805 805
