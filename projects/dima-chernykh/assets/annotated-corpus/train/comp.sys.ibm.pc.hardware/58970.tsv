From from From
: : :
dejesus dejesus dejesus
@ @ @
eniac eniac eniac
. . .
seas sea sea
. . .
upenn upenn upenn
. . .
edu edu edu
( ( (
Cavalier cavali Cavalier
) ) )
Subject subject Subject
: : :
Help help Help
needed need need
Organization organ Organization
: : :
University univers University
of of of
Pennsylvania pennsylvania Pennsylvania
Lines line Lines
: : :
128 128 128
Nntp nntp Nntp
- - -
Posting post Posting
- - -
Host host Host
: : :
eniac eniac eniac
. . .
seas sea sea
. . .
upenn upenn upenn
. . .
edu edu edu
Hello hello Hello
. . .
I i I
hope hope hope
somebody somebodi somebody
out out out
here here here
can can can
help help help
me me me
. . .
I i I
am am be
currently current currently
working work work
on on on
a a a
project project project
where where where
I i I
am am be
trying tri try
to to to
communicate communic communicate
from from from
an an an
IBM ibm IBM
386 386 386
with with with
Phoenix phoenix Phoenix
BIOS bio BIOS
, , ,
using use use
C c C
+ + +
+ + +
, , ,
to to to
a a a
board board board
that that that
I i I
made made make
with with with
an an an
Intel intel Intel
8085 8085 8085
CPU cpu CPU
with with with
UART uart UART
chip chip chip
. . .
The the The
board board board
works work work
fine fine fine
with with with
the the the
TRANSMIT transmit TRANSMIT
command command command
and and and
Terminal termin Terminal
Emulation emul Emulation
mode mode mode
of of of
Kermit kermit Kermit
, , ,
but but but
there there there
seems seem seem
to to to
be be be
something someth something
wrong wrong wrong
with with with
the the the
initialization initi initialization
or or or
protocol protocol protocol
used use use
when when when
I i I
try tri try
C c C
+ + +
+ + +
. . .
I i I
need need need
to to to
access access access
the the the
unit unit unit
I i I
built built build
using use use
C c C
, , ,
because becaus because
I i I
have have have
a a a
sizable sizabl sizable
chunk chunk chunk
of of of
C c C
code code code
that that that
I i I
will will will
be be be
using use use
to to to
perform perform perform
calculations calcul calculation
and and and
operations oper operation
that that that
will will will
be be be
very veri very
difficult difficult difficult
to to to
code code code
in in in
assembly assembl assembly
language languag language
for for for
the the the
8085 8085 8085
. . .
I i I
have have have
included includ include
the the the
assembly assembl assembly
code code code
that that that
I i I
am am be
running run run
and and and
the the the
C c C
+ + +
+ + +
code code code
that that that
I i I
am am be
trying tri try
to to to
use use use
. . .
If if If
anyone anyon anyone
can can can
show show show
me me me
something someth something
that that that
I i I
am am be
doing do do
blatantly blatant blatantly
incorrectly incorrect incorrectly
or or or
that that that
I i I
am am be
missing miss miss
because becaus because
of of of
my my my
lack lack lack
of of of
knowledge knowledg knowledge
about about about
RS rs RS
- - -
232 232 232
serial serial serial
communications communic communication
, , ,
please pleas please
e e e
- - -
mail mail mail
me me me
. . .
I i I
wrote wrote write
the the the
assembly assembl assembly
language languag language
to to to
wait wait wait
for for for
a a a
character charact character
to to to
be be be
received receiv receive
and and and
then then then
to to to
check check check
it it it
against against against
the the the
0 0 0
x x x
20 20 20
character charact character
, , ,
if if if
a a a
0 0 0
x x x
20 20 20
is is be
received receiv receive
, , ,
the the the
LEDs led LEDs
will will will
indicate indic indicate
this this this
. . .
Two two Two
C c C
+ + +
+ + +
programs program program
that that that
I i I
have have have
written written write
do do do
nothing noth nothing
, , ,
but but but
set set set
up up up
COM com COM
port port port
2 2 2
and and and
send send send
the the the
0 0 0
x x x
20 20 20
character charact character
. . .
One one One
uses use use
the the the
bioscom bioscom bioscom
( ( (
) ) )
function function function
in in in
bios bio bios
. . .
h h h
the the the
other other other
uses use use
the the the
software softwar software
interrupt interrupt interrupt
int int int
86 86 86
( ( (
) ) )
function function function
in in in
dos dos do
. . .
h h h
. . .
I i I
have have have
triple tripl triple
checked check check
the the the
baud baud baud
rate rate rate
( ( (
2400 2400 2400
) ) )
the the the
parity pariti parity
( ( (
none none none
) ) )
the the the
stop stop stop
bits bit bit
( ( (
1 1 1
) ) )
the the the
character charact character
length length length
( ( (
8 8 8
bits bit bit
) ) )
and and and
the the the
interrupt interrupt interrupt
calls call call
for for for
( ( (
0 0 0
x x x
14 14 14
) ) )
. . .
Currently current Currently
, , ,
I i I
am am be
at at at
a a a
loss loss loss
as as a
to to to
what what what
may may may
be be be
wrong wrong wrong
. . .
Any ani Any
hardware hardwar hardware
gurus gurus guru
out out out
there there there
want want want
to to to
comment comment comment
? ? ?
Thanks thank Thanks
alot alot alot
, , ,
Hubert hubert Hubert
De de De
Jesus jesus Jesus
dejesus dejesus dejesus
@ @ @
eniac eniac eniac
. . .
seas sea sea
. . .
upenn upenn upenn
. . .
edu edu edu
INTEL intel INTEL
ASM asm ASM
COMMAND command COMMAND
EQU equ EQU
3000 3000 3000
H h H
; ; ;
Command command Command
Register regist Register
on on on
8155 8155 8155
PORTA porta PORTA
EQU equ EQU
3001 3001 3001
H h H
; ; ;
Port port Port
A a A
on on on
8155 8155 8155
TIMERLO timerlo TIMERLO
EQU equ EQU
3004 3004 3004
H h H
; ; ;
High high High
8 8 8
bits bit bit
of of of
8155 8155 8155
Timer timer Timer
TIMERHI timerhi TIMERHI
EQU equ EQU
3005 3005 3005
H h H
; ; ;
Low low Low
8 8 8
bits bit bit
of of of
8155 8155 8155
Timer timer Timer
UARTDATA uartdata UARTDATA
EQU equ EQU
E e E
000 000 000
H h H
; ; ;
UART uart UART
Data data Data
Register regist Register
UARTCMD uartcmd UARTCMD
EQU equ EQU
E e E
001 001 001
H h H
; ; ;
UART uart UART
Command command Command
Register regist Register
ORG org ORG
4000 4000 4000
H h H
; ; ;
SRAM sram SRAM
location locat location
MVI mvi MVI
A a A
, , ,
08 08 08
H h H
; ; ;
Set set Set
Low low Low
Timer timer Timer
Bits bit Bits
STA sta STA
TIMERLO timerlo TIMERLO
MVI mvi MVI
A a A
, , ,
40 40 40
H h H
; ; ;
Set set Set
High high High
Timer timer Timer
Bits bit Bits
STA sta STA
TIMERHI timerhi TIMERHI
MVI mvi MVI
A a A
, , ,
11111101 11111101 11111101
B b B
; ; ;
Start start Start
Timer timer Timer
& & &
Enable enabl Enable
Port port Port
A a A
STA sta STA
COMMAND command COMMAND
MVI mvi MVI
A a A
, , ,
11 11 11
H h H
; ; ;
Display display Display
11 11 11
on on on
7 7 7
- - -
segment segment segment
LEDs led LEDs
STA sta STA
PORTA porta PORTA
MVI mvi MVI
A a A
, , ,
00 00 00
H h H
; ; ;
Clear clear Clear
UART uart UART
Command command Command
STA sta STA
UARTCMD uartcmd UARTCMD
STA sta STA
UARTCMD uartcmd UARTCMD
STA sta STA
UARTCMD uartcmd UARTCMD
MVI mvi MVI
A a A
, , ,
01000000 01000000 01000000
B b B
; ; ;
Internally intern Internally
reset reset reset
UART uart UART
STA sta STA
UARTCMD uartcmd UARTCMD
LDA lda LDA
UARTDATA uartdata UARTDATA
; ; ;
Remove remov Remove
extraneous extran extraneous
data data data
MVI mvi MVI
A a A
, , ,
01001111 01001111 01001111
B b B
; ; ;
Init init Init
UART uart UART
for for for
8 8 8
data data data
bits bit bit
, , ,
STA sta STA
UARTCMD uartcmd UARTCMD
; ; ;
no no no
parity pariti parity
, , ,
1 1 1
stop stop stop
bit bit bit
, , ,
64 64 64
x x x
async async async
MVI mvi MVI
A a A
, , ,
00100111 00100111 00100111
B b B
; ; ;
Enable enabl Enable
Transmit transmit Transmit
and and and
Receive receiv Receive
STA sta STA
UARTCMD uartcmd UARTCMD
INIT init INIT
: : :
LDA lda LDA
UARTCMD uartcmd UARTCMD
; ; ;
Read read Read
Status status Status
Register regist Register
ANI ani ANI
02 02 02
H h H
; ; ;
Is is Is
RxRDY rxrdi RxRDY
? ? ?
JZ jz JZ
INIT init INIT
; ; ;
No no No
, , ,
loop loop loop
LDA lda LDA
UARTDATA uartdata UARTDATA
; ; ;
Read read Read
Data data Data
Character charact Character
CPI cpi CPI
' ' '
' ' '
; ; ;
Is is Is
Character charact Character
= = =
0 0 0
x x x
20 20 20
? ? ?
JNZ jnz JNZ
INIT init INIT
; ; ;
No no No
, , ,
loop loop loop
MVI mvi MVI
A a A
, , ,
22 22 22
H h H
; ; ;
Character charact Character
received receiv receive
, , ,
STA sta STA
PORTA porta PORTA
; ; ;
Display display Display
22 22 22
on on on
7 7 7
- - -
segment segment segment
LEDs led LEDs
HLT hlt HLT
END end END
C c C
+ + +
+ + +
using use use
BIOSCOM bioscom BIOSCOM
( ( (
) ) )
# # #
include includ include
< < <
stdio stdio stdio
. . .
h h h
> > >
# # #
include includ include
< < <
stdlib stdlib stdlib
. . .
h h h
> > >
# # #
include includ include
< < <
bios bio bios
. . .
h h h
> > >
# # #
define defin define
INIT init INIT
0 0 0
# # #
define defin define
SEND send SEND
1 1 1
# # #
define defin define
RECEIVE receiv RECEIVE
2 2 2
# # #
define defin define
STATUS status STATUS
3 3 3
# # #
define defin define
COM com COM
2 2 2
1 1 1
void void void
main main main
( ( (
) ) )
{ { {
char char char
abyte abyt abyte
; ; ;
abyte abyt abyte
= = =
0 0 0
xa xa xa
3 3 3
; ; ;
bioscom bioscom bioscom
( ( (
INIT init INIT
, , ,
abyte abyt abyte
, , ,
COM com COM
2 2 2
) ) )
; ; ;
printf printf printf
( ( (
" " "
Initialized initi Initialized
COMM comm COMM
PORT port PORT
2 2 2
\ \ \
n n n
" " "
) ) )
; ; ;
while while while
( ( (
! ! !
( ( (
bioscom bioscom bioscom
( ( (
STATUS status STATUS
, , ,
0 0 0
, , ,
COM com COM
2 2 2
) ) )
& & &
0 0 0
x x x
4000 4000 4000
) ) )
) ) )
; ; ;
abyte abyt abyte
= = =
' ' '
' ' '
; ; ;
bioscom bioscom bioscom
( ( (
SEND send SEND
, , ,
abyte abyt abyte
, , ,
COM com COM
2 2 2
) ) )
; ; ;
printf printf printf
( ( (
" " "
Sent sent Sent
start start start
character charact character
\ \ \
n n n
" " "
) ) )
; ; ;
} } }
C c C
+ + +
+ + +
using use use
INT int INT
86 86 86
( ( (
) ) )
# # #
include includ include
< < <
stdio stdio stdio
. . .
h h h
> > >
# # #
include includ include
< < <
stdlib stdlib stdlib
. . .
h h h
> > >
# # #
include includ include
< < <
dos dos do
. . .
h h h
> > >
# # #
include includ include
< < <
bios bio bios
. . .
h h h
> > >
main main main
( ( (
) ) )
{ { {
union union union
REGS reg REGS
registers regist register
; ; ;
registers regist register
. . .
h h h
. . .
ah ah ah
= = =
0 0 0
x x x
00 00 00
; ; ;
registers regist register
. . .
h h h
. . .
al al al
= = =
0 0 0
xa xa xa
7 7 7
; ; ;
registers regist register
. . .
x x x
. . .
dx dx dx
= = =
0 0 0
x x x
01 01 01
; ; ;
int int int
86 86 86
( ( (
0 0 0
x x x
14 14 14
, , ,
& & &
registers regist register
, , ,
& & &
registers regist register
) ) )
; ; ;
printf printf printf
( ( (
" " "
COM com COM
2 2 2
Initialized initi Initialized
\ \ \
n n n
" " "
) ) )
; ; ;
registers regist register
. . .
h h h
. . .
ah ah ah
= = =
0 0 0
x x x
01 01 01
; ; ;
registers regist register
. . .
h h h
. . .
al al al
= = =
0 0 0
x x x
20 20 20
; ; ;
registers regist register
. . .
x x x
. . .
dx dx dx
= = =
0 0 0
x x x
01 01 01
; ; ;
int int int
86 86 86
( ( (
0 0 0
x x x
14 14 14
, , ,
& & &
registers regist register
, , ,
& & &
registers regist register
) ) )
; ; ;
printf printf printf
( ( (
" " "
Sent sent Sent
start start start
character charact character
\ \ \
n n n
" " "
) ) )
; ; ;
} } }
