From from From
: : :
chongo chongo chongo
@ @ @
toad toad toad
. . .
com com com
( ( (
Landon landon Landon
C c C
. . .
Noll noll Noll
) ) )
Subject subject Subject
: : :
10 10 10
th th th
International intern International
Obfuscated obfusc Obfuscated
C c C
Code code Code
Contest contest Contest
Opening open Opening
( ( (
part part part
2 2 2
of of of
2 2 2
) ) )
Article articl Article
- - -
I i I
. . .
D d D
. . .
: : :
toad toad toad
. . .
32195 32195 32195
Expires expir Expires
: : :
7 7 7
May may May
93 93 93
00 00 00
: : :
00 00 00
: : :
00 00 00
GMT gmt GMT
Reply repli Reply
- - -
To to To
: : :
chongo chongo chongo
@ @ @
toad toad toad
. . .
com com com
. . .
UUCP uucp UUCP
( ( (
Landon landon Landon
C c C
. . .
Noll noll Noll
) ) )
Distribution distribut Distribution
: : :
world world world
Organization organ Organization
: : :
Nebula nebula Nebula
Consultants consult Consultants
in in in
San san San
Francisco francisco Francisco
Lines line Lines
: : :
1382 1382 1382
Enclosed enclos Enclosed
are are be
the the the
rules rule rule
, , ,
guidelines guidelin guideline
and and and
related relat related
information inform information
for for for
the the the
10 10 10
th th th
International intern International
Obfuscated obfusc Obfuscated
C c C
Code code Code
Contest contest Contest
. . .
( ( (
This this This
is is be
part part part
2 2 2
of of of
a a a
2 2 2
part part part
shar shar shar
file file file
) ) )
. . .
Enjoy enjoy Enjoy
! ! !
chongo chongo chongo
< < <
Landon landon Landon
Curt curt Curt
Noll noll Noll
> > >
/ / /
\ \ \
oo oo oo
/ / /
\ \ \
Larry larri Larry
Bassel bassel Bassel
= = =
- - -
= = =
# # #
! ! !
/ / /
bin bin bin
/ / /
sh sh sh
# # #
This this This
is is be
part part part
02 02 02
of of of
a a a
multipart multipart multipart
archive archiv archive
# # #
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
mkentry mkentri mkentry
. . .
c c c
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
echo echo echo
" " "
x x x
- - -
extracting extract extract
mkentry mkentri mkentry
. . .
c c c
( ( (
Text text Text
) ) )
" " "
sed sed sed
' ' '
s s s
/ / /
^ ^ ^
X x X
/ / /
/ / /
' ' '
< < <
< < <
' ' '
SHAR shar SHAR
_ _ _
EOF eof EOF
' ' '
> > >
mkentry mkentri mkentry
. . .
c c c
& & &
& & &
X x X
/ / /
* * *
@ @ @
( ( (
# # #
) ) )
mkentry mkentri mkentry
. . .
c c c
1 1 1
. . .
24 24 24
3 3 3
/ / /
1 1 1
/ / /
93 93 93
02 02 02
: : :
28 28 28
: : :
49 49 49
* * *
/ / /
X x X
/ / /
* * *
X x X
* * *
Copyright copyright Copyright
( ( (
c c c
) ) )
Landon landon Landon
Curt curt Curt
Noll noll Noll
& & &
Larry larri Larry
Bassel bassel Bassel
, , ,
1993 1993 1993
. . .
X x X
* * *
All all All
Rights right Rights
Reserved reserv Reserved
. . .
Permission permiss Permission
for for for
personal person personal
, , ,
education educ education
or or or
non non non
- - -
profit profit profit
use use use
X x X
* * *
is is be
granted grant grant
provided provid provide
this this this
this this this
copyright copyright copyright
and and and
notice notic notice
are are be
included includ include
in in in
its it it
X x X
* * *
entirety entireti entirety
and and and
remains remain remain
unaltered unalt unaltered
. . .
All all All
other other other
uses use us
must must must
receive receiv receive
prior prior prior
X x X
* * *
permission permiss permission
in in in
writing write write
from from from
both both both
Landon landon Landon
Curt curt Curt
Noll noll Noll
and and and
Larry larri Larry
Bassel bassel Bassel
. . .
X x X
* * *
/ / /
X x X
/ / /
* * *
X x X
* * *
mkentry mkentri mkentry
- - -
make make make
an an an
International intern International
Obfuscated obfusc Obfuscated
C c C
Code code Code
Contest contest Contest
entry entri entry
X x X
* * *
X x X
* * *
usage usag usage
: : :
X x X
* * *
mkentry mkentri mkentry
- - -
r r r
remarks remark remark
- - -
b b b
build build build
- - -
p p p
prog prog prog
. . .
c c c
- - -
o o o
ioccc ioccc ioccc
. . .
entry entri entry
X x X
* * *
X x X
* * *
- - -
r r r
remarks remark remark
file file file
with with with
remarks remark remark
about about about
the the the
entry entri entry
X x X
* * *
- - -
b b b
build build build
file file file
containing contain contain
how how how
prog prog prog
. . .
c c c
should should should
be be be
built built build
X x X
* * *
- - -
p p p
prog prog prog
. . .
c c c
the the the
obfuscated obfusc obfuscated
program program program
source sourc source
file file file
X x X
* * *
- - -
o o o
ioccc ioccc ioccc
. . .
entry entri entry
ioccc ioccc ioccc
entry entri entry
output output output
file file file
X x X
* * *
X x X
* * *
compile compil compile
by by by
: : :
X x X
* * *
cc cc cc
mkentry mkentri mkentry
. . .
c c c
- - -
o o o
mkentry mkentri mkentry
X x X
* * *
/ / /
X x X
/ / /
* * *
X x X
* * *
Placed place Placed
in in in
the the the
public public public
domain domain domain
by by by
Landon landon Landon
Curt curt Curt
Noll noll Noll
, , ,
1992 1992 1992
. . .
X x X
* * *
X x X
* * *
THIS this THIS
SOFTWARE softwar SOFTWARE
IS is IS
PROVIDED provid PROVIDED
` ` `
` ` `
AS as AS
IS is IS
' ' '
' ' '
AND and AND
WITHOUT without WITHOUT
ANY ani ANY
EXPRESS express EXPRESS
OR or OR
IMPLIED impli IMPLIED
X x X
* * *
WARRANTIES warranti WARRANTIES
, , ,
INCLUDING includ INCLUDING
, , ,
WITHOUT without WITHOUT
LIMITATION limit LIMITATION
, , ,
THE the THE
IMPLIED impli IMPLIED
WARRANTIES warranti WARRANTIES
OF of OF
X x X
* * *
MERCHANTABILITY merchant MERCHANTABILITY
AND and AND
FITNESS fit FITNESS
FOR for FOR
A a A
PARTICULAR particular PARTICULAR
PURPOSE purpos PURPOSE
. . .
X x X
* * *
/ / /
X x X
/ / /
* * *
X x X
* * *
WARNING warn WARNING
: : :
X x X
* * *
X x X
* * *
This this This
program program program
attempts attempt attempt
to to to
implement implement implement
the the the
IOCCC ioccc IOCCC
rules rule rule
. . .
Every everi Every
attempt attempt attempt
X x X
* * *
has has have
been been be
made made make
to to to
make make make
sure sure sure
that that that
this this this
program program program
produces produc produce
an an an
entry entri entry
that that that
X x X
* * *
conforms conform conforms
to to to
the the the
contest contest contest
rules rule rule
. . .
In in In
all all all
cases case case
, , ,
where where where
this this this
program program program
X x X
* * *
differs differ differs
from from from
the the the
contest contest contest
rules rule rule
, , ,
the the the
contest contest contest
rules rule rule
will will will
be be be
used use use
. . .
Be be Be
X x X
* * *
sure sure sure
to to to
check check check
with with with
the the the
contest contest contest
rules rule rule
before befor before
submitting submit submit
an an an
entry entri entry
. . .
X x X
* * *
X x X
* * *
Send send Send
questions question question
or or or
comments comment comment
( ( (
but but but
not not not
entries entri entry
) ) )
about about about
the the the
contest contest contest
, , ,
to to to
: : :
X x X
* * *
X x X
* * *
. . .
. . .
. . .
! ! !
{ { {
sun sun sun
, , ,
pacbell pacbel pacbell
, , ,
uunet uunet uunet
, , ,
pyramid pyramid pyramid
} } }
! ! !
hoptoad hoptoad hoptoad
! ! !
judges judg judge
X x X
* * *
judges judg judge
@ @ @
toad toad toad
. . .
com com com
X x X
* * *
The the The
rules rule rule
and and and
the the the
guidelines guidelin guideline
may may may
( ( (
and and and
often often often
do do do
) ) )
change chang change
from from from
year year year
to to to
X x X
* * *
year year year
. . .
You you You
should should should
be be be
sure sure sure
you you you
have have have
the the the
current current current
rules rule rule
and and and
guidelines guidelin guideline
X x X
* * *
prior prior prior
to to to
submitting submit submit
entries entri entry
. . .
To to To
obtain obtain obtain
all all all
3 3 3
of of of
them them them
, , ,
send send send
Email email Email
X x X
* * *
to to to
the the the
address address address
above abov above
and and and
use use use
the the the
subject subject subject
' ' '
send send send
rules rule rule
' ' '
. . .
X x X
* * *
X x X
* * *
Because becaus Because
contest contest contest
rules rule rule
change chang change
from from from
year year year
to to to
year year year
, , ,
one one one
should should should
only onli only
use use use
this this this
X x X
* * *
program program program
for for for
the the the
year year year
that that that
it it it
was was be
intended intend intend
. . .
Be be Be
sure sure sure
that that that
the the the
RULE rule RULE
_ _ _
YEAR year YEAR
X x X
* * *
define defin define
below below below
matches match match
this this this
current current current
year year year
. . .
X x X
* * *
/ / /
X x X
X x X
# # #
include includ include
< < <
stdio stdio stdio
. . .
h h h
> > >
X x X
# # #
include includ include
< < <
ctype ctype ctype
. . .
h h h
> > >
X x X
# # #
include includ include
< < <
time time time
. . .
h h h
> > >
X x X
# # #
include includ include
< < <
sys sys sys
/ / /
types type type
. . .
h h h
> > >
X x X
# # #
include includ include
< < <
sys sys sys
/ / /
stat stat stat
. . .
h h h
> > >
X x X
X x X
/ / /
* * *
logic logic logic
* * *
/ / /
X x X
# # #
ifndef ifndef ifndef
TRUE true TRUE
X x X
# # #
define defin define
TRUE true TRUE
1 1 1
X x X
# # #
endif endif endif
/ / /
* * *
TRUE true TRUE
* * *
/ / /
X x X
# # #
ifndef ifndef ifndef
FALSE fals FALSE
X x X
# # #
define defin define
FALSE fals FALSE
0 0 0
X x X
# # #
endif endif endif
/ / /
* * *
FALSE fals FALSE
* * *
/ / /
X x X
# # #
define defin define
EOF eof EOF
_ _ _
OK ok OK
TRUE true TRUE
X x X
# # #
define defin define
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
FALSE fals FALSE
X x X
X x X
/ / /
* * *
global global global
limits limit limit
* * *
/ / /
X x X
# # #
define defin define
RULE rule RULE
_ _ _
YEAR year YEAR
1993 1993 1993
/ / /
* * *
NOTE note NOTE
: : :
should should should
match match match
the the the
current current current
year year year
* * *
/ / /
X x X
# # #
define defin define
START start START
_ _ _
DATE date DATE
" " "
1 1 1
Mar mar Mar
92 92 92
0 0 0
: : :
00 00 00
UTC utc UTC
" " "
/ / /
* * *
first first first
confirmation confirm confirmation
received receiv receive
* * *
/ / /
X x X
# # #
define defin define
MAX max MAX
_ _ _
COL col COL
79 79 79
/ / /
* * *
max max max
column column column
a a a
line line line
should should should
hit hit hit
* * *
/ / /
X x X
# # #
define defin define
MAX max MAX
_ _ _
BUILD build BUILD
_ _ _
SIZE size SIZE
256 256 256
/ / /
* * *
max max max
how how how
to to to
build build build
size size size
* * *
/ / /
X x X
# # #
define defin define
MAX max MAX
_ _ _
PROGRAM program PROGRAM
_ _ _
SIZE size SIZE
3217 3217 3217
/ / /
* * *
max max max
program program program
source sourc source
size size size
* * *
/ / /
X x X
# # #
define defin define
MAX max MAX
_ _ _
PROGRAM program PROGRAM
_ _ _
SIZE size SIZE
2 2 2
1536 1536 1536
/ / /
* * *
max max max
program program program
source sourc source
size size size
not not not
counting count count
X x X
whitespace whitespac whitespace
and and and
{ { {
} } }
; ; ;
not not not
followed follow follow
by by by
X x X
whitespace whitespac whitespace
or or or
EOF eof EOF
* * *
/ / /
X x X
# # #
define defin define
MAX max MAX
_ _ _
TITLE titl TITLE
_ _ _
LEN len LEN
12 12 12
/ / /
* * *
max max max
chars char char
in in in
the the the
title titl title
* * *
/ / /
X x X
# # #
define defin define
MAX max MAX
_ _ _
ENTRY entri ENTRY
_ _ _
LEN len LEN
1 1 1
/ / /
* * *
max max max
length length length
in in in
the the the
entry entri entry
input input input
line line line
* * *
/ / /
X x X
# # #
define defin define
MAX max MAX
_ _ _
ENTRY entri ENTRY
8 8 8
/ / /
* * *
max max max
number number number
of of of
entries entri entry
per per per
person person person
per per per
year year year
* * *
/ / /
X x X
# # #
define defin define
MAX max MAX
_ _ _
FILE file FILE
_ _ _
LEN len LEN
1024 1024 1024
/ / /
* * *
max max max
filename filenam filename
length length length
for for for
a a a
info info info
file file file
* * *
/ / /
X x X
X x X
/ / /
* * *
where where where
to to to
send send send
entries entri entry
* * *
/ / /
X x X
# # #
define defin define
ENTRY entri ENTRY
_ _ _
ADDR addr ADDR
1 1 1
" " "
. . .
. . .
. . .
! ! !
{ { {
apple appl apple
, , ,
pyramid pyramid pyramid
, , ,
sun sun sun
, , ,
uunet uunet uunet
} } }
! ! !
hoptoad hoptoad hoptoad
! ! !
obfuscate obfusc obfuscate
" " "
X x X
# # #
define defin define
ENTRY entri ENTRY
_ _ _
ADDR addr ADDR
2 2 2
" " "
obfuscate obfusc obfuscate
@ @ @
toad toad toad
. . .
com com com
" " "
X x X
X x X
/ / /
* * *
uuencode uuencod uuencode
process process process
- - -
assumes assum assume
ASCII ascii ASCII
* * *
/ / /
X x X
# # #
define defin define
UUENCODE uuencod UUENCODE
( ( (
c c c
) ) )
( ( (
encode encod encode
_ _ _
str str str
[ [ [
( ( (
int int int
) ) )
( ( (
c c c
) ) )
& & &
0 0 0
xff xff xff
] ] ]
) ) )
X x X
# # #
define defin define
UUENCODE uuencod UUENCODE
_ _ _
LEN len LEN
45 45 45
/ / /
* * *
max max max
uuencode uuencod uuencode
chunk chunk chunk
size size size
* * *
/ / /
X x X
# # #
define defin define
UUINFO uuinfo UUINFO
_ _ _
MODE mode MODE
0444 0444 0444
/ / /
* * *
mode mode mode
of of of
an an an
info info info
file file file
' ' '
s s s
uuencode uuencod uuencode
file file file
* * *
/ / /
X x X
# # #
define defin define
UUBUILD uubuild UUBUILD
_ _ _
MODE mode MODE
0444 0444 0444
/ / /
* * *
mode mode mode
of of of
the the the
build build build
file file file
' ' '
s s s
uuencode uuencod uuencode
file file file
* * *
/ / /
X x X
# # #
define defin define
UUBUILD uubuild UUBUILD
_ _ _
NAME name NAME
" " "
build build build
" " "
/ / /
* * *
name name name
for for for
the the the
build build build
file file file
' ' '
s s s
uuencode uuencod uuencode
file file file
* * *
/ / /
X x X
# # #
define defin define
UUPROG uuprog UUPROG
_ _ _
MODE mode MODE
0444 0444 0444
/ / /
* * *
mode mode mode
of of of
the the the
program program program
' ' '
s s s
uuencode uuencod uuencode
file file file
* * *
/ / /
X x X
# # #
define defin define
UUPROG uuprog UUPROG
_ _ _
NAME name NAME
" " "
prog prog prog
. . .
c c c
" " "
/ / /
* * *
name name name
for for for
the the the
program program program
' ' '
s s s
uuencode uuencod uuencode
file file file
* * *
/ / /
X x X
X x X
/ / /
* * *
encode encod encode
_ _ _
str str str
[ [ [
( ( (
char char char
) ) )
val val val
] ] ]
is is be
the the the
uuencoded uuencod uuencoded
character charact character
of of of
val val val
* * *
/ / /
Xchar xchar Xchar
encode encod encode
_ _ _
str str str
[ [ [
256 256 256
+ + +
1 1 1
] ] ]
= = =
" " "
` ` `
! ! !
\ \ \
" " "
# # #
$ $ $
% % %
& & &
' ' '
( ( (
) ) )
* * *
+ + +
, , ,
- - -
. . .
/ / /
0123456789 0123456789 0123456789
: : :
; ; ;
< < <
= = =
> > >
? ? ?
@ @ @
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
[ [ [
\ \ \
\ \ \
] ] ]
^ ^ ^
_ _ _
! ! !
\ \ \
" " "
# # #
$ $ $
% % %
& & &
' ' '
( ( (
) ) )
* * *
+ + +
, , ,
- - -
. . .
/ / /
0123456789 0123456789 0123456789
: : :
; ; ;
< < <
= = =
> > >
? ? ?
@ @ @
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
[ [ [
\ \ \
\ \ \
] ] ]
^ ^ ^
_ _ _
! ! !
\ \ \
" " "
# # #
$ $ $
% % %
& & &
' ' '
( ( (
) ) )
* * *
+ + +
, , ,
- - -
. . .
/ / /
0123456789 0123456789 0123456789
: : :
; ; ;
< < <
= = =
> > >
? ? ?
@ @ @
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
[ [ [
\ \ \
\ \ \
] ] ]
^ ^ ^
_ _ _
! ! !
\ \ \
" " "
# # #
$ $ $
% % %
& & &
' ' '
( ( (
) ) )
* * *
+ + +
, , ,
- - -
. . .
/ / /
0123456789 0123456789 0123456789
: : :
; ; ;
< < <
= = =
> > >
? ? ?
@ @ @
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
[ [ [
\ \ \
\ \ \
] ] ]
^ ^ ^
_ _ _
" " "
; ; ;
X x X
X x X
/ / /
* * *
global global global
declarations declar declaration
* * *
/ / /
Xchar xchar Xchar
* * *
program program program
; ; ;
/ / /
* * *
our our our
name name name
* * *
/ / /
Xlong xlong Xlong
start start start
_ _ _
time time time
; ; ;
/ / /
* * *
the the the
startup startup startup
time time time
* * *
/ / /
X x X
X x X
/ / /
* * *
forward forward forward
declarations declar declaration
* * *
/ / /
Xvoid xvoid Xvoid
parse pars parse
_ _ _
args arg args
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
usage usag usage
( ( (
) ) )
; ; ;
XFILE xfile XFILE
* * *
open open open
_ _ _
remark remark remark
( ( (
) ) )
; ; ;
XFILE xfile XFILE
* * *
open open open
_ _ _
build build build
( ( (
) ) )
; ; ;
XFILE xfile XFILE
* * *
open open open
_ _ _
program program program
( ( (
) ) )
; ; ;
XFILE xfile XFILE
* * *
open open open
_ _ _
output output output
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
output output output
_ _ _
entry entri entry
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
output output output
_ _ _
remark remark remark
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
output output output
_ _ _
author author author
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
output output output
_ _ _
info info info
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
output output output
_ _ _
build build build
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
output output output
_ _ _
program program program
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
output output output
_ _ _
end end end
( ( (
) ) )
; ; ;
Xint xint Xint
get get get
_ _ _
line line line
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
output output output
_ _ _
till till till
_ _ _
dot dot dot
( ( (
) ) )
; ; ;
Xint xint Xint
col col col
_ _ _
len len len
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
check check check
_ _ _
io io io
( ( (
) ) )
; ; ;
Xvoid xvoid Xvoid
uuencode uuencod uuencode
( ( (
) ) )
; ; ;
X x X
Xmain xmain Xmain
( ( (
argc argc argc
, , ,
argv argv argv
) ) )
X x X
int int int
argc argc argc
; ; ;
/ / /
* * *
arg arg arg
count count count
* * *
/ / /
X x X
char char char
* * *
* * *
argv argv argv
; ; ;
/ / /
* * *
the the the
args arg args
* * *
/ / /
X x X
{ { {
X x X
FILE file FILE
* * *
remark remark remark
= = =
NULL null NULL
; ; ;
/ / /
* * *
open open open
remarks remark remark
stream stream stream
* * *
/ / /
X x X
FILE file FILE
* * *
build build build
= = =
NULL null NULL
; ; ;
/ / /
* * *
open open open
build build build
file file file
stream stream stream
* * *
/ / /
X x X
FILE file FILE
* * *
prog prog prog
= = =
NULL null NULL
; ; ;
/ / /
* * *
open open open
program program program
stream stream stream
* * *
/ / /
X x X
FILE file FILE
* * *
output output output
= = =
NULL null NULL
; ; ;
/ / /
* * *
open open open
output output output
stream stream stream
* * *
/ / /
X x X
char char char
* * *
rname rname rname
= = =
NULL null NULL
; ; ;
/ / /
* * *
file file file
with with with
remarks remark remark
about about about
the the the
entry entri entry
* * *
/ / /
X x X
char char char
* * *
bname bname bname
= = =
NULL null NULL
; ; ;
/ / /
* * *
file file file
containing contain contain
how how how
prog prog prog
. . .
c c c
should should should
be be be
built built build
* * *
/ / /
X x X
char char char
* * *
pname pname pname
= = =
NULL null NULL
; ; ;
/ / /
* * *
the the the
obfuscated obfusc obfuscated
program program program
source sourc source
file file file
* * *
/ / /
X x X
char char char
* * *
oname onam oname
= = =
NULL null NULL
; ; ;
/ / /
* * *
ioccc ioccc ioccc
entry entri entry
output output output
file file file
* * *
/ / /
X x X
struct struct struct
tm tm tm
* * *
tm tm tm
; ; ;
/ / /
* * *
startup startup startup
time time time
structure structur structure
* * *
/ / /
X x X
X x X
/ / /
* * *
X x X
* * *
check check check
on on on
the the the
year year year
X x X
* * *
/ / /
X x X
start start start
_ _ _
time time time
= = =
time time time
( ( (
( ( (
long long long
* * *
) ) )
0 0 0
) ) )
; ; ;
X x X
tm tm tm
= = =
gmtime gmtime gmtime
( ( (
& & &
start start start
_ _ _
time time time
) ) )
; ; ;
X x X
if if if
( ( (
tm tm tm
- - -
> > >
tm tm tm
_ _ _
year year year
! ! !
= = =
RULE rule RULE
_ _ _
YEAR year YEAR
- - -
1900 1900 1900
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
WARNING warn WARNING
: : :
this this this
program program program
applies appli apply
to to to
% % %
d d d
, , ,
which which which
may may may
differ differ differ
from from from
% % %
d d d
\ \ \
n n n
\ \ \
n n n
" " "
, , ,
X x X
argv argv argv
[ [ [
0 0 0
] ] ]
, , ,
RULE rule RULE
_ _ _
YEAR year YEAR
, , ,
1900 1900 1900
+ + +
tm tm tm
- - -
> > >
tm tm tm
_ _ _
year year year
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
parse pars parse
the the the
command command command
line line line
args arg args
X x X
* * *
/ / /
X x X
parse pars parse
_ _ _
args arg args
( ( (
argc argc argc
, , ,
argv argv argv
, , ,
& & &
rname rname rname
, , ,
& & &
bname bname bname
, , ,
& & &
pname pname pname
, , ,
& & &
oname onam oname
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
open open open
/ / /
check check check
the the the
input input input
and and and
output output output
files file file
X x X
* * *
X x X
* * *
We we We
open open open
and and and
truncate truncat truncate
the the the
output output output
file file file
first first first
, , ,
in in in
case case case
it it it
is is be
the the the
same same same
X x X
* * *
as as a
one one one
of of of
the the the
input input input
files file file
. . .
X x X
* * *
/ / /
X x X
output output output
= = =
open open open
_ _ _
output output output
( ( (
oname onam oname
) ) )
; ; ;
X x X
remark remark remark
= = =
open open open
_ _ _
remark remark remark
( ( (
rname rname rname
) ) )
; ; ;
X x X
build build build
= = =
open open open
_ _ _
build build build
( ( (
bname bname bname
) ) )
; ; ;
X x X
prog prog prog
= = =
open open open
_ _ _
program program program
( ( (
pname pname pname
) ) )
; ; ;
X x X
if if if
( ( (
output output output
= = =
= = =
NULL null NULL
| | |
| | |
remark remark remark
= = =
= = =
NULL null NULL
| | |
| | |
build build build
= = =
= = =
NULL null NULL
| | |
| | |
prog prog prog
= = =
= = =
NULL null NULL
) ) )
{ { {
X x X
exit exit exit
( ( (
1 1 1
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
each each each
section section section
X x X
* * *
/ / /
X x X
output output output
_ _ _
entry entri entry
( ( (
output output output
, , ,
oname onam oname
) ) )
; ; ;
X x X
output output output
_ _ _
remark remark remark
( ( (
output output output
, , ,
oname onam oname
, , ,
remark remark remark
, , ,
rname rname rname
) ) )
; ; ;
X x X
output output output
_ _ _
author author author
( ( (
output output output
, , ,
oname onam oname
) ) )
; ; ;
X x X
output output output
_ _ _
info info info
( ( (
output output output
, , ,
oname onam oname
) ) )
; ; ;
X x X
output output output
_ _ _
build build build
( ( (
output output output
, , ,
oname onam oname
, , ,
build build build
, , ,
bname bname bname
) ) )
; ; ;
X x X
output output output
_ _ _
program program program
( ( (
output output output
, , ,
oname onam oname
, , ,
prog prog prog
, , ,
pname pname pname
) ) )
; ; ;
X x X
output output output
_ _ _
end end end
( ( (
output output output
, , ,
oname onam oname
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
flush flush flush
the the the
output output output
X x X
* * *
/ / /
X x X
if if if
( ( (
fflush fflush fflush
( ( (
output output output
) ) )
= = =
= = =
EOF eof EOF
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
% % %
s s s
: : :
flush flush flush
error error error
in in in
% % %
s s s
: : :
" " "
, , ,
program program program
, , ,
oname onam oname
) ) )
; ; ;
X x X
perror perror perror
( ( (
" " "
" " "
) ) )
; ; ;
X x X
exit exit exit
( ( (
2 2 2
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
final final final
words word word
X x X
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nYour nyour nYour
entry entri entry
can can can
be be be
found found find
in in in
% % %
s s s
. . .
You you You
should should should
check check check
this this this
file file file
\ \ \
n n n
" " "
, , ,
X x X
oname onam oname
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
correct correct correct
any ani any
problems problem problem
and and and
verify verifi verify
that that that
the the the
uudecode uudecod uudecode
utility util utility
will will will
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
correctly correct correctly
decode decod decode
your your your
build build build
file file file
and and and
program program program
. . .
\ \ \
n n n
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
This this This
program program program
has has have
been been be
provided provid provide
as as a
a a a
guide guid guide
for for for
submitters submitt submitter
. . .
In in In
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
cases case case
where where where
it it it
conflicts conflict conflict
with with with
the the the
rules rule rule
, , ,
the the the
rules rule rule
shall shall shall
apply appli apply
. . .
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
It it It
is is be
your your your
responsibility respons responsibility
to to to
ensure ensur ensure
that that that
your your your
entry entri entry
conforms conform conforms
to to to
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
the the the
current current current
rules rule rule
. . .
\ \ \
n n n
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
Email email Email
your your your
entries entri entry
to to to
: : :
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
\ \ \
t t t
% % %
s s s
\ \ \
n n n
" " "
, , ,
ENTRY entri ENTRY
_ _ _
ADDR addr ADDR
1 1 1
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
\ \ \
t t t
% % %
s s s
\ \ \
n n n
\ \ \
n n n
" " "
, , ,
ENTRY entri ENTRY
_ _ _
ADDR addr ADDR
2 2 2
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
Please pleas Please
use use use
the the the
following follow following
subject subject subject
when when when
you you you
Email email Email
your your your
entry entri entry
: : :
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
\ \ \
tioccc tioccc tioccc
entry entri entry
\ \ \
n n n
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
/ / /
* * *
all all all
done done do
* * *
/ / /
X x X
exit exit exit
( ( (
0 0 0
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
parse pars parse
_ _ _
args arg args
- - -
parse pars parse
the the the
command command command
line line line
args arg args
X x X
* * *
X x X
* * *
Given given Given
the the the
command command command
line line line
args arg args
, , ,
this this this
function function function
parses pars parse
them them them
and and and
sets set set
the the the
X x X
* * *
required requir require
name name name
flags flag flag
. . .
This this This
function function function
will will will
return return return
only onli only
if if if
the the the
command command command
X x X
* * *
line line line
syntax syntax syntax
is is be
correct correct correct
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xparse xpars Xparse
_ _ _
args arg args
( ( (
argc argc argc
, , ,
argv argv argv
, , ,
rname rname rname
, , ,
bname bname bname
, , ,
pname pname pname
, , ,
oname onam oname
) ) )
X x X
int int int
argc argc argc
; ; ;
/ / /
* * *
arg arg arg
count count count
* * *
/ / /
X x X
char char char
* * *
* * *
argv argv argv
; ; ;
/ / /
* * *
the the the
args arg args
* * *
/ / /
X x X
char char char
* * *
* * *
rname rname rname
; ; ;
/ / /
* * *
file file file
with with with
remarks remark remark
about about about
the the the
entry entri entry
* * *
/ / /
X x X
char char char
* * *
* * *
bname bname bname
; ; ;
/ / /
* * *
file file file
containing contain contain
how how how
prog prog prog
. . .
c c c
should should should
be be be
built built build
* * *
/ / /
X x X
char char char
* * *
* * *
pname pname pname
; ; ;
/ / /
* * *
the the the
obfuscated obfusc obfuscated
program program program
source sourc source
file file file
* * *
/ / /
X x X
char char char
* * *
* * *
oname onam oname
; ; ;
/ / /
* * *
ioccc ioccc ioccc
entry entri entry
output output output
file file file
* * *
/ / /
X x X
{ { {
X x X
char char char
* * *
optarg optarg optarg
; ; ;
/ / /
* * *
- - -
flag flag flag
option option option
operand operand operand
* * *
/ / /
X x X
int int int
flagname flagnam flagname
; ; ;
/ / /
* * *
the the the
name name name
of of of
the the the
- - -
flag flag flag
* * *
/ / /
X x X
int int int
i i i
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
Not not Not
everyone everyon everyone
has has have
getopt getopt getopt
, , ,
so so so
we we we
must must must
parse pars parse
args arg args
by by by
hand hand hand
. . .
X x X
* * *
/ / /
X x X
program program program
= = =
argv argv argv
[ [ [
0 0 0
] ] ]
; ; ;
X x X
for for for
( ( (
i i i
= = =
1 1 1
; ; ;
i i i
< < <
argc argc argc
; ; ;
+ + +
+ + +
i i i
) ) )
{ { {
X x X
X x X
/ / /
* * *
determine determin determine
the the the
flagname flagnam flagname
* * *
/ / /
X x X
if if if
( ( (
argv argv argv
[ [ [
i i i
] ] ]
[ [ [
0 0 0
] ] ]
! ! !
= = =
' ' '
- - -
' ' '
) ) )
{ { {
X x X
usage usag usage
( ( (
1 1 1
) ) )
; ; ;
X x X
/ / /
* * *
NOTREACHED notreach NOTREACHED
* * *
/ / /
X x X
} } }
X x X
flagname flagnam flagname
= = =
( ( (
int int int
) ) )
argv argv argv
[ [ [
i i i
] ] ]
[ [ [
1 1 1
] ] ]
; ; ;
X x X
X x X
/ / /
* * *
determine determin determine
the the the
flag flag flag
' ' '
s s s
operand operand operand
* * *
/ / /
X x X
if if if
( ( (
flagname flagnam flagname
! ! !
= = =
' ' '
\ \ \
0 0 0
' ' '
& & &
& & &
argv argv argv
[ [ [
i i i
] ] ]
[ [ [
2 2 2
] ] ]
! ! !
= = =
' ' '
\ \ \
0 0 0
' ' '
) ) )
{ { {
X x X
optarg optarg optarg
= = =
& & &
argv argv argv
[ [ [
i i i
] ] ]
[ [ [
2 2 2
] ] ]
; ; ;
X x X
} } }
else els else
{ { {
X x X
if if if
( ( (
i i i
+ + +
1 1 1
> > >
= = =
argc argc argc
) ) )
{ { {
X x X
usage usag usage
( ( (
2 2 2
) ) )
; ; ;
X x X
/ / /
* * *
NOTREACHED notreach NOTREACHED
* * *
/ / /
X x X
} } }
else els else
{ { {
X x X
optarg optarg optarg
= = =
argv argv argv
[ [ [
+ + +
+ + +
i i i
] ] ]
; ; ;
X x X
} } }
X x X
} } }
X x X
X x X
/ / /
* * *
save save save
the the the
flag flag flag
' ' '
s s s
operand operand operand
in in in
the the the
correct correct correct
global global global
variable variabl variable
* * *
/ / /
X x X
switch switch switch
( ( (
flagname flagnam flagname
) ) )
{ { {
X x X
case case case
' ' '
r r r
' ' '
: : :
X x X
* * *
rname rname rname
= = =
optarg optarg optarg
; ; ;
X x X
break break break
; ; ;
X x X
case case case
' ' '
b b b
' ' '
: : :
X x X
* * *
bname bname bname
= = =
optarg optarg optarg
; ; ;
X x X
break break break
; ; ;
X x X
case case case
' ' '
p p p
' ' '
: : :
X x X
* * *
pname pname pname
= = =
optarg optarg optarg
; ; ;
X x X
break break break
; ; ;
X x X
case case case
' ' '
o o o
' ' '
: : :
X x X
* * *
oname onam oname
= = =
optarg optarg optarg
; ; ;
X x X
break break break
; ; ;
X x X
default default default
: : :
X x X
usage usag usage
( ( (
3 3 3
) ) )
; ; ;
X x X
/ / /
* * *
NOTREACHED notreach NOTREACHED
* * *
/ / /
X x X
} } }
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
verify verifi verify
that that that
we we we
have have have
all all all
of of of
the the the
required requir required
flags flag flag
X x X
* * *
/ / /
X x X
if if if
( ( (
* * *
rname rname rname
= = =
= = =
NULL null NULL
| | |
| | |
* * *
bname bname bname
= = =
= = =
NULL null NULL
| | |
| | |
* * *
pname pname pname
= = =
= = =
NULL null NULL
| | |
| | |
* * *
oname onam oname
= = =
= = =
NULL null NULL
) ) )
{ { {
X x X
usage usag usage
( ( (
4 4 4
) ) )
; ; ;
X x X
/ / /
* * *
NOTREACHED notreach NOTREACHED
* * *
/ / /
X x X
} } }
X x X
return return return
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
usage usag usage
- - -
print print print
a a a
usage usag usage
message messag message
and and and
exit exit exit
X x X
* * *
X x X
* * *
This this This
function function function
does doe do
not not not
return return return
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xusage xusag Xusage
( ( (
exitval exitv exitval
) ) )
X x X
int int int
exitval exitv exitval
; ; ;
/ / /
* * *
exit exit exit
with with with
this this this
value valu value
* * *
/ / /
X x X
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
usage usag usage
: : :
% % %
s s s
- - -
r r r
remarks remark remark
- - -
b b b
build build build
- - -
p p p
prog prog prog
. . .
c c c
- - -
o o o
ioccc ioccc ioccc
. . .
entry entri entry
\ \ \
n n n
\ \ \
n n n
" " "
, , ,
program program program
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
\ \ \
t t t
- - -
r r r
remarks remark remark
\ \ \
tfile tfile tfile
with with with
remarks remark remark
about about about
the the the
entry entri entry
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
\ \ \
t t t
- - -
b b b
build build build
\ \ \
tfile tfile tfile
containing contain contain
how how how
prog prog prog
. . .
c c c
should should should
be be be
built built build
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
\ \ \
t t t
- - -
p p p
prog prog prog
. . .
c c c
\ \ \
tthe tthe tthe
obfuscated obfusc obfuscated
program program program
source sourc source
file file file
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
\ \ \
t t t
- - -
o o o
ioccc ioccc ioccc
. . .
entry entri entry
\ \ \
tioccc tioccc tioccc
entry entri entry
output output output
file file file
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
exit exit exit
( ( (
exitval exitv exitval
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
open open open
_ _ _
remark remark remark
- - -
open open open
/ / /
check check check
the the the
remark remark remark
file file file
X x X
* * *
X x X
* * *
The the The
remark remark remark
file file file
should should should
be be be
indented indent indent
by by by
4 4 4
spaces space space
, , ,
and and and
should should should
not not not
extend extend extend
X x X
* * *
beyond beyond beyond
column column column
MAX max MAX
_ _ _
COL col COL
. . .
These these These
are are be
not not not
requirements requir requirement
, , ,
so so so
we we we
only onli only
warn warn warn
. . .
X x X
* * *
X x X
* * *
This this This
function function function
returns return return
NULL null NULL
on on on
I i I
/ / /
O o O
or or or
format format format
error error error
. . .
X x X
* * *
/ / /
XFILE xfile XFILE
* * *
Xopen xopen Xopen
_ _ _
remark remark remark
( ( (
filename filenam filename
) ) )
X x X
char char char
* * *
filename filenam filename
; ; ;
X x X
{ { {
X x X
FILE file FILE
* * *
stream stream stream
; ; ;
/ / /
* * *
the the the
opened open open
file file file
stream stream stream
* * *
/ / /
X x X
char char char
buf buf buf
[ [ [
BUFSIZ bufsiz BUFSIZ
+ + +
1 1 1
] ] ]
; ; ;
/ / /
* * *
input input input
buffer buffer buffer
* * *
/ / /
X x X
int int int
toolong toolong toolong
= = =
0 0 0
; ; ;
/ / /
* * *
number number number
of of of
lines line line
that that that
are are be
too too too
long long long
* * *
/ / /
X x X
int int int
non non non
_ _ _
indent indent indent
= = =
0 0 0
; ; ;
/ / /
* * *
number number number
of of of
lines line line
not not not
indented indent indent
by by by
4 4 4
spaces space space
* * *
/ / /
X x X
X x X
/ / /
* * *
X x X
* * *
open open open
the the the
remark remark remark
input input input
file file file
X x X
* * *
/ / /
X x X
stream stream stream
= = =
fopen fopen fopen
( ( (
filename filenam filename
, , ,
" " "
r r r
" " "
) ) )
; ; ;
X x X
if if if
( ( (
stream stream stream
= = =
= = =
NULL null NULL
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
% % %
s s s
: : :
cannot cannot cannot
open open open
remark remark remark
file file file
: : :
% % %
s s s
: : :
" " "
, , ,
X x X
program program program
, , ,
filename filenam filename
) ) )
; ; ;
X x X
perror perror perror
( ( (
" " "
" " "
) ) )
; ; ;
X x X
return return return
( ( (
NULL null NULL
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
look look look
at at at
each each each
line line line
X x X
* * *
/ / /
X x X
while while while
( ( (
fgets fget fgets
( ( (
buf buf buf
, , ,
BUFSIZ bufsiz BUFSIZ
, , ,
stream stream stream
) ) )
! ! !
= = =
NULL null NULL
) ) )
{ { {
X x X
X x X
/ / /
* * *
count count count
lines line line
that that that
do do do
not not not
start start start
with with with
4 4 4
spaces space space
* * *
/ / /
X x X
if if if
( ( (
buf buf buf
[ [ [
0 0 0
] ] ]
! ! !
= = =
' ' '
\ \ \
n n n
' ' '
& & &
& & &
strncmp strncmp strncmp
( ( (
buf buf buf
, , ,
" " "
" " "
, , ,
4 4 4
) ) )
! ! !
= = =
0 0 0
) ) )
{ { {
X x X
+ + +
+ + +
non non non
_ _ _
indent indent indent
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
count count count
long long long
lines line line
* * *
/ / /
X x X
if if if
( ( (
col col col
_ _ _
len len len
( ( (
buf buf buf
) ) )
> > >
MAX max MAX
_ _ _
COL col COL
) ) )
{ { {
X x X
/ / /
* * *
found found find
a a a
line line line
that that that
is is be
too too too
long long long
* * *
/ / /
X x X
+ + +
+ + +
toolong toolong toolong
; ; ;
X x X
} } }
X x X
} } }
X x X
X x X
/ / /
* * *
watch watch watch
for for for
I i I
/ / /
O o O
errors error error
* * *
/ / /
X x X
check check check
_ _ _
io io io
( ( (
stream stream stream
, , ,
filename filenam filename
, , ,
EOF eof EOF
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
note note note
long long long
lines line line
if if if
needed need need
* * *
/ / /
X x X
if if if
( ( (
toolong toolong toolong
> > >
0 0 0
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
WARNING warn WARNING
: : :
% % %
d d d
line line line
( ( (
s s s
) ) )
from from from
% % %
s s s
extend extend extend
beyond beyond beyond
the the the
80 80 80
th th th
column column column
\ \ \
n n n
" " "
, , ,
X x X
program program program
, , ,
toolong toolong toolong
, , ,
filename filenam filename
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
This this This
is is be
ok ok ok
, , ,
but but but
it it it
would would would
be be be
nice nice nice
to to to
avoid avoid avoid
\ \ \
n n n
\ \ \
n n n
" " "
, , ,
X x X
program program program
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
note note note
non non non
- - -
indented indent indented
lines line line
, , ,
if if if
needed need need
* * *
/ / /
X x X
if if if
( ( (
non non non
_ _ _
indent indent indent
> > >
0 0 0
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
WARNING warn WARNING
: : :
% % %
d d d
line line line
( ( (
s s s
) ) )
from from from
% % %
s s s
are are be
not not not
indented indent indent
by by by
4 4 4
spaces space space
\ \ \
n n n
" " "
, , ,
X x X
program program program
, , ,
non non non
_ _ _
indent indent indent
, , ,
filename filenam filename
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
This this This
is is be
ok ok ok
, , ,
but but but
it it it
would would would
be be be
nice nice nice
to to to
avoid avoid avoid
\ \ \
n n n
\ \ \
n n n
" " "
, , ,
X x X
program program program
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
return return return
the the the
open open open
file file file
* * *
/ / /
X x X
rewind rewind rewind
( ( (
stream stream stream
) ) )
; ; ;
X x X
return return return
( ( (
stream stream stream
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
open open open
_ _ _
build build build
- - -
open open open
/ / /
check check check
the the the
build build build
file file file
X x X
* * *
X x X
* * *
The the The
how how how
to to to
build build build
file file file
must must must
not not not
be be be
longer longer long
than than than
MAX max MAX
_ _ _
BUILD build BUILD
_ _ _
SIZE size SIZE
bytes byte byte
. . .
X x X
* * *
X x X
* * *
This this This
function function function
returns return return
NULL null NULL
on on on
I i I
/ / /
O o O
or or or
size size size
error error error
. . .
X x X
* * *
/ / /
XFILE xfile XFILE
* * *
Xopen xopen Xopen
_ _ _
build build build
( ( (
filename filenam filename
) ) )
X x X
char char char
* * *
filename filenam filename
; ; ;
X x X
{ { {
X x X
FILE file FILE
* * *
stream stream stream
; ; ;
/ / /
* * *
the the the
opened open open
file file file
stream stream stream
* * *
/ / /
X x X
struct struct struct
stat stat stat
statbuf statbuf statbuf
; ; ;
/ / /
* * *
the the the
status status status
of of of
the the the
open open open
file file file
* * *
/ / /
X x X
X x X
/ / /
* * *
X x X
* * *
open open open
the the the
how how how
to to to
build build build
input input input
file file file
X x X
* * *
/ / /
X x X
stream stream stream
= = =
fopen fopen fopen
( ( (
filename filenam filename
, , ,
" " "
r r r
" " "
) ) )
; ; ;
X x X
if if if
( ( (
stream stream stream
= = =
= = =
NULL null NULL
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
% % %
s s s
: : :
cannot cannot cannot
open open open
how how how
to to to
build build build
file file file
: : :
% % %
s s s
: : :
" " "
, , ,
X x X
program program program
, , ,
filename filenam filename
) ) )
; ; ;
X x X
perror perror perror
( ( (
" " "
" " "
) ) )
; ; ;
X x X
return return return
( ( (
NULL null NULL
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
determine determin determine
the the the
size size size
of of of
the the the
file file file
X x X
* * *
/ / /
X x X
if if if
( ( (
fstat fstat fstat
( ( (
fileno fileno fileno
( ( (
stream stream stream
) ) )
, , ,
& & &
statbuf statbuf statbuf
) ) )
< < <
0 0 0
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
% % %
s s s
: : :
cannot cannot cannot
stat stat stat
how how how
to to to
build build build
file file file
: : :
% % %
s s s
: : :
" " "
, , ,
X x X
program program program
, , ,
filename filenam filename
) ) )
; ; ;
X x X
perror perror perror
( ( (
" " "
" " "
) ) )
; ; ;
X x X
return return return
( ( (
NULL null NULL
) ) )
; ; ;
X x X
} } }
X x X
if if if
( ( (
statbuf statbuf statbuf
. . .
st st st
_ _ _
size size size
> > >
MAX max MAX
_ _ _
BUILD build BUILD
_ _ _
SIZE size SIZE
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
FATAL fatal FATAL
: : :
the the the
how how how
to to to
build build build
file file file
: : :
% % %
s s s
, , ,
is is be
% % %
d d d
bytes byte byte
long long long
\ \ \
n n n
" " "
, , ,
X x X
program program program
, , ,
filename filenam filename
, , ,
statbuf statbuf statbuf
. . .
st st st
_ _ _
size size size
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
it it it
may may may
not not not
be be be
longer longer long
than than than
% % %
d d d
bytes byte bytes
\ \ \
n n n
" " "
, , ,
X x X
program program program
, , ,
MAX max MAX
_ _ _
BUILD build BUILD
_ _ _
SIZE size SIZE
) ) )
; ; ;
X x X
return return return
( ( (
NULL null NULL
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
return return return
the the the
open open open
file file file
* * *
/ / /
X x X
return return return
( ( (
stream stream stream
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
open open open
_ _ _
program program program
- - -
open open open
/ / /
check check check
the the the
program program program
source sourc source
file file file
X x X
* * *
X x X
* * *
The the The
program program program
source sourc source
file file file
must must must
be be be
< < <
= = =
3217 3217 3217
bytes byte byte
. . .
The the The
number number number
of of of
X x X
* * *
non non non
- - -
whitespace whitespac whitespace
and and and
} } }
{ { {
; ; ;
chars char char
not not not
followed follow follow
by by by
whitespace whitespac whitespace
must must must
X x X
* * *
be be be
< < <
= = =
1536 1536 1536
bytes byte byte
. . .
X x X
* * *
X x X
* * *
This this This
function function function
returns return return
NULL null NULL
on on on
I i I
/ / /
O o O
or or or
size size size
error error error
. . .
X x X
* * *
/ / /
XFILE xfile XFILE
* * *
Xopen xopen Xopen
_ _ _
program program program
( ( (
filename filenam filename
) ) )
X x X
char char char
* * *
filename filenam filename
; ; ;
X x X
{ { {
X x X
FILE file FILE
* * *
stream stream stream
; ; ;
/ / /
* * *
the the the
opened open open
file file file
stream stream stream
* * *
/ / /
X x X
struct struct struct
stat stat stat
statbuf statbuf statbuf
; ; ;
/ / /
* * *
the the the
status status status
of of of
the the the
open open open
file file file
* * *
/ / /
X x X
int int int
count count count
; ; ;
/ / /
* * *
special special special
count count count
size size size
* * *
/ / /
X x X
int int int
c c c
; ; ;
/ / /
* * *
the the the
character charact character
read read read
* * *
/ / /
X x X
X x X
/ / /
* * *
X x X
* * *
open open open
the the the
program program program
source sourc source
input input input
file file file
X x X
* * *
/ / /
X x X
stream stream stream
= = =
fopen fopen fopen
( ( (
filename filenam filename
, , ,
" " "
r r r
" " "
) ) )
; ; ;
X x X
if if if
( ( (
stream stream stream
= = =
= = =
NULL null NULL
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
% % %
s s s
: : :
cannot cannot cannot
open open open
program program program
source sourc source
file file file
: : :
% % %
s s s
: : :
" " "
, , ,
X x X
program program program
, , ,
filename filenam filename
) ) )
; ; ;
X x X
perror perror perror
( ( (
" " "
" " "
) ) )
; ; ;
X x X
exit exit exit
( ( (
7 7 7
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
determine determin determine
the the the
size size size
of of of
the the the
file file file
X x X
* * *
/ / /
X x X
if if if
( ( (
fstat fstat fstat
( ( (
fileno fileno fileno
( ( (
stream stream stream
) ) )
, , ,
& & &
statbuf statbuf statbuf
) ) )
< < <
0 0 0
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
% % %
s s s
: : :
cannot cannot cannot
stat stat stat
program program program
source sourc source
file file file
: : :
% % %
s s s
: : :
" " "
, , ,
X x X
program program program
, , ,
filename filenam filename
) ) )
; ; ;
X x X
perror perror perror
( ( (
" " "
" " "
) ) )
; ; ;
X x X
return return return
( ( (
NULL null NULL
) ) )
; ; ;
X x X
} } }
X x X
if if if
( ( (
statbuf statbuf statbuf
. . .
st st st
_ _ _
size size size
> > >
MAX max MAX
_ _ _
PROGRAM program PROGRAM
_ _ _
SIZE size SIZE
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
FATAL fatal FATAL
: : :
the the the
program program program
source sourc source
file file file
: : :
% % %
s s s
, , ,
is is be
% % %
d d d
bytes byte byte
long long long
\ \ \
n n n
" " "
, , ,
X x X
program program program
, , ,
filename filenam filename
, , ,
statbuf statbuf statbuf
. . .
st st st
_ _ _
size size size
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
it it it
may may may
not not not
be be be
longer longer long
than than than
% % %
d d d
bytes byte bytes
\ \ \
n n n
" " "
, , ,
X x X
program program program
, , ,
MAX max MAX
_ _ _
PROGRAM program PROGRAM
_ _ _
SIZE size SIZE
) ) )
; ; ;
X x X
return return return
( ( (
NULL null NULL
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
count count count
the the the
non non non
- - -
whitespace whitespac whitespace
, , ,
non non non
{ { {
} } }
; ; ;
followed follow follow
by by by
whitespace whitespac whitespace
chars char char
X x X
* * *
/ / /
X x X
count count count
= = =
0 0 0
; ; ;
X x X
c c c
= = =
0 0 0
; ; ;
X x X
while while while
( ( (
( ( (
c c c
= = =
fgetc fgetc fgetc
( ( (
stream stream stream
) ) )
) ) )
! ! !
= = =
EOF eof EOF
) ) )
{ { {
X x X
/ / /
* * *
look look look
at at at
non non non
- - -
whitespace whitespac whitespace
* * *
/ / /
X x X
if if if
( ( (
! ! !
isascii isascii isascii
( ( (
c c c
) ) )
| | |
| | |
! ! !
isspace isspac isspace
( ( (
c c c
) ) )
) ) )
{ { {
X x X
switch switch switch
( ( (
c c c
) ) )
{ { {
X x X
case case case
' ' '
{ { {
' ' '
: : :
/ / /
* * *
count count count
if if if
not not not
followed follow follow
by by by
EOF eof EOF
or or or
whitespace whitespac whitespace
* * *
/ / /
X x X
case case case
' ' '
} } }
' ' '
: : :
X x X
case case case
' ' '
; ; ;
' ' '
: : :
X x X
/ / /
* * *
peek peek peek
at at at
next next next
char char char
* * *
/ / /
X x X
c c c
= = =
fgetc fgetc fgetc
( ( (
stream stream stream
) ) )
; ; ;
X x X
if if if
( ( (
c c c
! ! !
= = =
EOF eof EOF
& & &
& & &
isascii isascii isascii
( ( (
c c c
) ) )
& & &
& & &
! ! !
isspace isspac isspace
( ( (
c c c
) ) )
) ) )
{ { {
X x X
/ / /
* * *
not not not
followed follow follow
by by by
whitespace whitespac whitespace
or or or
EOF eof EOF
, , ,
count count count
it it it
* * *
/ / /
X x X
ungetc ungetc ungetc
( ( (
c c c
, , ,
stream stream stream
) ) )
; ; ;
X x X
+ + +
+ + +
count count count
; ; ;
X x X
} } }
X x X
break break break
; ; ;
X x X
default default default
: : :
X x X
+ + +
+ + +
count count count
; ; ;
X x X
break break break
; ; ;
X x X
} } }
X x X
} } }
X x X
} } }
X x X
X x X
/ / /
* * *
watch watch watch
for for for
I i I
/ / /
O o O
errors error error
* * *
/ / /
X x X
check check check
_ _ _
io io io
( ( (
stream stream stream
, , ,
filename filenam filename
, , ,
EOF eof EOF
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
look look look
at at at
the the the
special special special
size size size
* * *
/ / /
X x X
if if if
( ( (
count count count
> > >
MAX max MAX
_ _ _
PROGRAM program PROGRAM
_ _ _
SIZE size SIZE
2 2 2
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
FATAL fatal FATAL
: : :
the the the
number number number
of of of
bytes byte byte
that that that
are are be
non non non
- - -
whitespace whitespac whitespace
, , ,
and and and
\ \ \
n n n
" " "
, , ,
X x X
program program program
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
that that that
are are be
not not not
' ' '
{ { {
' ' '
, , ,
' ' '
} } }
' ' '
, , ,
' ' '
; ; ;
' ' '
followed follow follow
by by by
whitespace whitespac whitespace
\ \ \
n n n
" " "
, , ,
X x X
program program program
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
or or or
EOF eof EOF
must must must
be be be
< < <
= = =
% % %
d d d
bytes byte bytes
\ \ \
n n n
" " "
, , ,
X x X
program program program
, , ,
MAX max MAX
_ _ _
PROGRAM program PROGRAM
_ _ _
SIZE size SIZE
2 2 2
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
X x X
" " "
% % %
s s s
: : :
in in in
% % %
s s s
, , ,
% % %
d d d
bytes byte byte
were were be
found found find
\ \ \
n n n
" " "
, , ,
X x X
program program program
, , ,
filename filenam filename
, , ,
count count count
) ) )
; ; ;
X x X
return return return
( ( (
NULL null NULL
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
return return return
the the the
open open open
file file file
* * *
/ / /
X x X
rewind rewind rewind
( ( (
stream stream stream
) ) )
; ; ;
X x X
return return return
( ( (
stream stream stream
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
open open open
_ _ _
output output output
- - -
open open open
/ / /
check check check
the the the
entry entri entry
output output output
file file file
X x X
* * *
X x X
* * *
This this This
function function function
returns return return
NULL null NULL
on on on
open open open
error error error
. . .
X x X
* * *
/ / /
XFILE xfile XFILE
* * *
Xopen xopen Xopen
_ _ _
output output output
( ( (
filename filenam filename
) ) )
X x X
char char char
* * *
filename filenam filename
; ; ;
X x X
{ { {
X x X
FILE file FILE
* * *
stream stream stream
; ; ;
/ / /
* * *
the the the
opened open open
file file file
stream stream stream
* * *
/ / /
X x X
X x X
/ / /
* * *
X x X
* * *
open open open
the the the
ioccc ioccc ioccc
entry entri entry
output output output
file file file
X x X
* * *
/ / /
X x X
stream stream stream
= = =
fopen fopen fopen
( ( (
filename filenam filename
, , ,
" " "
w w w
" " "
) ) )
; ; ;
X x X
if if if
( ( (
stream stream stream
= = =
= = =
NULL null NULL
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
% % %
s s s
: : :
cannot cannot cannot
open open open
ioccc ioccc ioccc
entry entri entry
file file file
for for for
output output output
: : :
% % %
s s s
: : :
" " "
, , ,
X x X
program program program
, , ,
filename filenam filename
) ) )
; ; ;
X x X
perror perror perror
( ( (
" " "
" " "
) ) )
; ; ;
X x X
exit exit exit
( ( (
8 8 8
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
return return return
the the the
open open open
file file file
* * *
/ / /
X x X
return return return
( ( (
stream stream stream
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
_ _ _
entry entri entry
- - -
output output output
the the the
- - -
- - -
- - -
entry entri entry
- - -
- - -
- - -
section section section
X x X
* * *
X x X
* * *
Read read Read
the the the
needed need need
information inform information
form form form
stdin stdin stdin
, , ,
and and and
write write write
the the the
entry entri entry
section section section
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xoutput xoutput Xoutput
_ _ _
entry entri entry
( ( (
output output output
, , ,
oname onam oname
) ) )
X x X
FILE file FILE
* * *
output output output
; ; ;
/ / /
* * *
entry entri entry
' ' '
s s s
output output output
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
oname onam oname
; ; ;
/ / /
* * *
name name name
of of of
the the the
output output output
file file file
* * *
/ / /
X x X
{ { {
X x X
char char char
title titl title
[ [ [
MAX max MAX
_ _ _
TITLE titl TITLE
_ _ _
LEN len LEN
+ + +
1 1 1
+ + +
1 1 1
] ] ]
; ; ;
/ / /
* * *
the the the
entry entri entry
' ' '
s s s
title titl title
* * *
/ / /
X x X
char char char
buf buf buf
[ [ [
MAX max MAX
_ _ _
COL col COL
+ + +
1 1 1
+ + +
1 1 1
] ] ]
; ; ;
/ / /
* * *
I i I
/ / /
O o O
buffer buffer buffer
* * *
/ / /
X x X
int int int
entry entri entry
= = =
0 0 0
; ; ;
/ / /
* * *
entry entri entry
number number number
* * *
/ / /
X x X
int int int
ret ret ret
; ; ;
/ / /
* * *
fields field field
processed process process
by by by
fscanf fscanf fscanf
* * *
/ / /
X x X
int int int
ok ok ok
_ _ _
line line line
= = =
0 0 0
; ; ;
/ / /
* * *
0 0 0
= = =
> > >
the the the
line line line
is is be
not not not
ok ok ok
* * *
/ / /
X x X
char char char
skip skip skip
; ; ;
/ / /
* * *
input input input
to to to
skip skip skip
* * *
/ / /
X x X
FILE file FILE
* * *
date date date
_ _ _
pipe pipe pipe
; ; ;
/ / /
* * *
pipe pipe pipe
to to to
a a a
date date date
command command command
* * *
/ / /
X x X
time time time
_ _ _
t t t
epoch epoch epoch
_ _ _
sec sec sec
; ; ;
/ / /
* * *
seconds second second
since sinc since
the the the
epoch epoch epoch
* * *
/ / /
X x X
char char char
* * *
p p p
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
start start start
of of of
the the the
section section section
X x X
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
- - -
- - -
- - -
entry entri entry
- - -
- - -
- - -
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
rule rule rule
year year year
X x X
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
rule rule rule
: : :
\ \ \
t t t
% % %
d d d
\ \ \
n n n
" " "
, , ,
RULE rule RULE
_ _ _
YEAR year YEAR
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
determine determin determine
if if if
this this this
is is be
a a a
fix fix fix
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
Is is Is
this this this
a a a
fix fix fix
, , ,
update updat update
or or or
resubmittion resubmitt resubmittion
to to to
a a a
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
previous previous previous
entry entri entry
( ( (
enter enter enter
y y y
or or or
n n n
) ) )
? ? ?
" " "
) ) )
; ; ;
X x X
while while while
( ( (
get get get
_ _ _
line line line
( ( (
buf buf buf
, , ,
1 1 1
+ + +
1 1 1
, , ,
0 0 0
) ) )
< < <
= = =
0 0 0
| | |
| | |
! ! !
( ( (
buf buf buf
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
y y y
' ' '
| | |
| | |
buf buf buf
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
n n n
' ' '
) ) )
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
nplease npleas nplease
answer answer answer
y y y
or or or
n n n
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
if if if
( ( (
buf buf buf
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
y y y
' ' '
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
fix fix fix
: : :
\ \ \
ty ty ty
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
\ \ \
nBe nbe nBe
sure sure sure
that that that
the the the
title titl title
and and and
entry entri entry
number number number
that that that
you you you
give give give
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
are are be
the the the
same same same
of of of
as as a
the the the
entry entri entry
you you you
are are be
replacing replac replace
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
} } }
else els else
{ { {
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
fix fix fix
: : :
\ \ \
tn tn tn
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
title titl title
X x X
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nYour nyour nYour
title titl title
must must must
match match match
expression express expression
be be be
a a a
[ [ [
a a a
- - -
zA za zA
- - -
Z z Z
0 0 0
- - -
9 9 9
_ _ _
= = =
] ] ]
character charact character
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
followed follow follow
by by by
0 0 0
to to to
% % %
d d d
more more more
[ [ [
a a a
- - -
zA za zA
- - -
Z z Z
0 0 0
- - -
9 9 9
_ _ _
= = =
+ + +
- - -
] ] ]
characters charact character
. . .
\ \ \
n n n
\ \ \
n n n
" " "
, , ,
X x X
MAX max MAX
_ _ _
TITLE titl TITLE
_ _ _
LEN len LEN
- - -
1 1 1
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
It it It
is is be
suggested suggest suggest
, , ,
but but but
not not not
required requir require
, , ,
that that that
the the the
title titl title
should should should
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
incorporate incorpor incorporate
your your your
username usernam username
; ; ;
in in in
the the the
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
case case case
of of of
multiple multipl multiple
authors author author
, , ,
consider consid consider
using use use
parts part part
of of of
the the the
usernames usernam usernames
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
of of of
the the the
authors author author
. . .
\ \ \
n n n
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
enter enter enter
your your your
title titl title
: : :
" " "
) ) )
; ; ;
X x X
do do do
{ { {
X x X
/ / /
* * *
prompt prompt prompt
and and and
read read read
a a a
line line line
* * *
/ / /
X x X
if if if
( ( (
( ( (
ok ok ok
_ _ _
line line line
= = =
get get get
_ _ _
line line line
( ( (
title titl title
, , ,
MAX max MAX
_ _ _
TITLE titl TITLE
_ _ _
LEN len LEN
+ + +
1 1 1
, , ,
MAX max MAX
_ _ _
COL col COL
- - -
9 9 9
) ) )
) ) )
< < <
= = =
0 0 0
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
ntitle ntitl ntitle
is is be
too too too
long long long
, , ,
please pleas please
re re re
- - -
enter enter enter
: : :
" " "
) ) )
; ; ;
X x X
continue continu continue
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
verify verifi verify
the the the
pattern pattern pattern
, , ,
not not not
everyone everyon everyone
has has have
regexp regexp regexp
, , ,
so so so
do do do
it it it
by by by
hand hand hand
* * *
/ / /
X x X
if if if
( ( (
! ! !
isascii isascii isascii
( ( (
( ( (
int int int
) ) )
title titl title
[ [ [
0 0 0
] ] ]
) ) )
| | |
| | |
X x X
! ! !
( ( (
isalnum isalnum isalnum
( ( (
( ( (
int int int
) ) )
title titl title
[ [ [
0 0 0
] ] ]
) ) )
| | |
| | |
title titl title
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
_ _ _
' ' '
| | |
| | |
title titl title
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
= = =
' ' '
) ) )
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
ninvalid ninvalid ninvalid
first first first
character charact character
in in in
the the the
title titl title
\ \ \
n n n
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
enter enter enter
your your your
title titl title
: : :
" " "
) ) )
; ; ;
X x X
ok ok ok
_ _ _
line line line
= = =
0 0 0
; ; ;
X x X
} } }
else els else
{ { {
X x X
for for for
( ( (
p p p
= = =
( ( (
& & &
title titl title
[ [ [
1 1 1
] ] ]
) ) )
; ; ;
* * *
p p p
! ! !
= = =
' ' '
\ \ \
0 0 0
' ' '
& & &
& & &
* * *
p p p
! ! !
= = =
' ' '
\ \ \
n n n
' ' '
; ; ;
+ + +
+ + +
p p p
) ) )
{ { {
X x X
if if if
( ( (
! ! !
isascii isascii isascii
( ( (
( ( (
int int int
) ) )
* * *
p p p
) ) )
| | |
| | |
X x X
! ! !
( ( (
isalnum isalnum isalnum
( ( (
( ( (
int int int
) ) )
* * *
p p p
) ) )
| | |
| | |
X x X
* * *
p p p
= = =
= = =
' ' '
_ _ _
' ' '
| | |
| | |
* * *
p p p
= = =
= = =
' ' '
= = =
' ' '
| | |
| | |
* * *
p p p
= = =
= = =
' ' '
+ + +
' ' '
| | |
| | |
* * *
p p p
= = =
= = =
' ' '
- - -
' ' '
) ) )
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
ninvalid ninvalid ninvalid
character charact character
in in in
the the the
title titl title
\ \ \
n n n
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
enter enter enter
your your your
title titl title
: : :
" " "
) ) )
; ; ;
X x X
ok ok ok
_ _ _
line line line
= = =
0 0 0
; ; ;
X x X
} } }
X x X
} } }
X x X
} } }
X x X
} } }
while while while
( ( (
ok ok ok
_ _ _
line line line
< < <
= = =
0 0 0
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
title titl title
: : :
\ \ \
t t t
% % %
s s s
" " "
, , ,
title titl title
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
entry entri entry
number number number
X x X
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nEach neach nEach
person person person
may may may
submit submit submit
up up up
to to to
% % %
d d d
entries entri entry
per per per
year year year
. . .
\ \ \
n n n
\ \ \
n n n
" " "
, , ,
X x X
MAX max MAX
_ _ _
ENTRY entri ENTRY
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
enter enter enter
an an an
entry entri entry
number number number
from from from
0 0 0
to to to
% % %
d d d
inclusive inclus inclusive
: : :
" " "
, , ,
MAX max MAX
_ _ _
ENTRY entri ENTRY
- - -
1 1 1
) ) )
; ; ;
X x X
do do do
{ { {
X x X
/ / /
* * *
get get get
a a a
valid valid valid
input input input
line line line
* * *
/ / /
X x X
fflush fflush fflush
( ( (
stdout stdout stdout
) ) )
; ; ;
X x X
ret ret ret
= = =
fscanf fscanf fscanf
( ( (
stdin stdin stdin
, , ,
" " "
% % %
d d d
[ [ [
\ \ \
n n n
] ] ]
" " "
, , ,
& & &
entry entri entry
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
stdin stdin stdin
, , ,
" " "
stdin stdin stdin
" " "
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
/ / /
* * *
skip skip skip
over over over
input input input
until until until
newline newlin newline
is is be
found found find
* * *
/ / /
X x X
do do do
{ { {
X x X
skip skip skip
= = =
fgetc fgetc fgetc
( ( (
stdin stdin stdin
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
stdin stdin stdin
, , ,
" " "
stdin stdin stdin
" " "
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
if if if
( ( (
skip skip skip
! ! !
= = =
' ' '
\ \ \
n n n
' ' '
) ) )
{ { {
X x X
/ / /
* * *
bad bad bad
text text text
in in in
input input input
, , ,
invalidate invalid invalidate
entry entri entry
number number number
* * *
/ / /
X x X
entry entri entry
= = =
- - -
1 1 1
; ; ;
X x X
} } }
X x X
} } }
while while while
( ( (
skip skip skip
! ! !
= = =
' ' '
\ \ \
n n n
' ' '
) ) )
; ; ;
X x X
X x X
/ / /
* * *
check check check
if if if
we we we
have have have
a a a
number number number
, , ,
and and and
if if if
it it it
is is be
in in in
range rang range
* * *
/ / /
X x X
if if if
( ( (
ret ret ret
! ! !
= = =
1 1 1
| | |
| | |
entry entri entry
< < <
0 0 0
| | |
| | |
entry entri entry
> > >
MAX max MAX
_ _ _
ENTRY entri ENTRY
- - -
1 1 1
) ) )
{ { {
X x X
printf printf printf
( ( (
X x X
" " "
\ \ \
nThe nthe nThe
entry entri entry
number number number
must must must
be be be
between between between
0 0 0
and and and
% % %
d d d
inclusive inclus inclusive
\ \ \
n n n
\ \ \
n n n
" " "
, , ,
X x X
MAX max MAX
_ _ _
ENTRY entri ENTRY
- - -
1 1 1
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
enter enter enter
the the the
entry entri entry
number number number
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
} } }
while while while
( ( (
ret ret ret
! ! !
= = =
1 1 1
| | |
| | |
entry entri entry
< < <
0 0 0
| | |
| | |
entry entri entry
> > >
MAX max MAX
_ _ _
ENTRY entri ENTRY
- - -
1 1 1
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
entry entri entry
: : :
\ \ \
t t t
% % %
d d d
\ \ \
n n n
" " "
, , ,
entry entri entry
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
submission submiss submission
date date date
X x X
* * *
/ / /
X x X
/ / /
* * *
returns return return
a a a
newline newlin newline
* * *
/ / /
X x X
epoch epoch epoch
_ _ _
sec sec sec
= = =
time time time
( ( (
NULL null NULL
) ) )
; ; ;
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
date date date
: : :
\ \ \
t t t
% % %
s s s
" " "
, , ,
asctime asctim asctime
( ( (
gmtime gmtime gmtime
( ( (
& & &
epoch epoch epoch
_ _ _
sec sec sec
) ) )
) ) )
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
OS os OS
/ / /
machine machin machine
host host host
information inform information
X x X
* * *
/ / /
X x X
printf printf printf
( ( (
X x X
" " "
\ \ \
nEnter nenter nEnter
the the the
machine machin machine
( ( (
s s s
) ) )
and and and
OS os OS
( ( (
s s s
) ) )
under under under
which which which
your your your
entry entri entry
was was be
tested test test
. . .
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
output output output
_ _ _
till till till
_ _ _
dot dot dot
( ( (
output output output
, , ,
oname onam oname
, , ,
" " "
host host host
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
_ _ _
remark remark remark
- - -
output output output
the the the
- - -
- - -
- - -
remark remark remark
- - -
- - -
- - -
section section section
X x X
* * *
X x X
* * *
Read read Read
the the the
needed need need
information inform information
form form form
stdin stdin stdin
, , ,
and and and
write write write
the the the
entry entri entry
section section section
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xoutput xoutput Xoutput
_ _ _
remark remark remark
( ( (
output output output
, , ,
oname onam oname
, , ,
remark remark remark
, , ,
rname rname rname
) ) )
X x X
FILE file FILE
* * *
output output output
; ; ;
/ / /
* * *
entry entri entry
' ' '
s s s
output output output
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
oname onam oname
; ; ;
/ / /
* * *
name name name
of of of
the the the
output output output
file file file
* * *
/ / /
X x X
FILE file FILE
* * *
remark remark remark
; ; ;
/ / /
* * *
stream stream stream
to to to
the the the
file file file
containing contain contain
remark remark remark
text text text
* * *
/ / /
X x X
char char char
* * *
rname rname rname
; ; ;
/ / /
* * *
name name name
of of of
the the the
remark remark remark
file file file
* * *
/ / /
X x X
{ { {
X x X
char char char
buf buf buf
[ [ [
BUFSIZ bufsiz BUFSIZ
+ + +
1 1 1
] ] ]
; ; ;
/ / /
* * *
input input input
/ / /
output output output
buffer buffer buffer
* * *
/ / /
X x X
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
start start start
of of of
the the the
section section section
X x X
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
- - -
- - -
- - -
remark remark remark
- - -
- - -
- - -
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
copy copi copy
the the the
remark remark remark
file file file
to to to
the the the
section section section
X x X
* * *
/ / /
X x X
while while while
( ( (
fgets fget fgets
( ( (
buf buf buf
, , ,
BUFSIZ bufsiz BUFSIZ
, , ,
remark remark remark
) ) )
! ! !
= = =
NULL null NULL
) ) )
{ { {
X x X
fputs fput fputs
( ( (
buf buf buf
, , ,
output output output
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
} } }
X x X
check check check
_ _ _
io io io
( ( (
remark remark remark
, , ,
rname rname rname
, , ,
EOF eof EOF
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
be be be
sure sure sure
that that that
the the the
remark remark remark
section section section
ends end end
with with with
a a a
newline newlin newline
* * *
/ / /
X x X
if if if
( ( (
buf buf buf
[ [ [
strlen strlen strlen
( ( (
buf buf buf
) ) )
- - -
1 1 1
] ] ]
! ! !
= = =
' ' '
\ \ \
n n n
' ' '
) ) )
{ { {
X x X
fputc fputc fputc
( ( (
' ' '
\ \ \
n n n
' ' '
, , ,
output output output
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
} } }
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
_ _ _
author author author
- - -
output output output
the the the
- - -
- - -
- - -
author author author
- - -
- - -
- - -
section section section
X x X
* * *
X x X
* * *
Read read Read
the the the
needed need need
information inform information
from from from
stdin stdin stdin
, , ,
and and and
write write write
the the the
author author author
section section section
. . .
X x X
* * *
If if If
multiple multipl multiple
authors author author
exist exist exist
, , ,
multiple multipl multiple
author author author
sections section section
will will will
be be be
written written write
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xoutput xoutput Xoutput
_ _ _
author author author
( ( (
output output output
, , ,
oname onam oname
) ) )
X x X
FILE file FILE
* * *
output output output
; ; ;
/ / /
* * *
entry entri entry
' ' '
s s s
output output output
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
oname onam oname
; ; ;
/ / /
* * *
name name name
of of of
the the the
output output output
file file file
* * *
/ / /
X x X
{ { {
X x X
char char char
buf buf buf
[ [ [
MAX max MAX
_ _ _
COL col COL
+ + +
1 1 1
+ + +
1 1 1
] ] ]
; ; ;
/ / /
* * *
I i I
/ / /
O o O
buffer buffer buffer
* * *
/ / /
X x X
int int int
more more more
_ _ _
auths auth auths
; ; ;
/ / /
* * *
TRUE true TRUE
= = =
> > >
more more more
authors author author
to to to
note note note
* * *
/ / /
X x X
int int int
auth auth auth
_ _ _
cnt cnt cnt
= = =
0 0 0
; ; ;
/ / /
* * *
number number number
of of of
authors author author
processed process process
* * *
/ / /
X x X
X x X
/ / /
* * *
X x X
* * *
prompt prompt prompt
the the the
user user user
for for for
the the the
author author author
section section section
X x X
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nEnter nenter nEnter
information inform information
about about about
each each each
author author author
. . .
If if If
your your your
entry entri entry
is is be
after after after
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
% % %
s s s
and and and
before befor before
the the the
contest contest contest
deadline deadlin deadline
, , ,
the the the
judges judg judge
\ \ \
n n n
" " "
, , ,
START start START
_ _ _
DATE date DATE
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
will will will
attempt attempt attempt
to to to
Email email Email
back back back
a a a
confirmation confirm confirmation
to to to
the the the
first first first
author author author
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
place place place
author author author
information inform information
for for for
each each each
author author author
in in in
an an an
individual individu individual
section section section
X x X
* * *
/ / /
X x X
do do do
{ { {
X x X
X x X
/ / /
* * *
write write write
the the the
start start start
of of of
the the the
section section section
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
- - -
- - -
- - -
author author author
- - -
- - -
- - -
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
write write write
the the the
author author author
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nAuthor nauthor nAuthor
# # #
% % %
d d d
name name name
: : :
" " "
, , ,
+ + +
+ + +
auth auth auth
_ _ _
cnt cnt cnt
) ) )
; ; ;
X x X
while while while
( ( (
get get get
_ _ _
line line line
( ( (
buf buf buf
, , ,
MAX max MAX
_ _ _
COL col COL
+ + +
1 1 1
, , ,
MAX max MAX
_ _ _
COL col COL
- - -
9 9 9
) ) )
< < <
= = =
0 0 0
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
nname nname nname
too too too
long long long
, , ,
please pleas please
re re re
- - -
enter enter enter
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
name name name
: : :
\ \ \
t t t
% % %
s s s
" " "
, , ,
buf buf buf
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
write write write
the the the
organization organ organization
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nEnter nenter nEnter
the the the
School school School
/ / /
Company compani Company
/ / /
Organization organ Organization
of of of
author author author
# # #
% % %
d d d
\ \ \
n n n
" " "
, , ,
X x X
auth auth auth
_ _ _
cnt cnt cnt
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
\ \ \
nAuthor nauthor nAuthor
# # #
% % %
d d d
org org org
: : :
" " "
, , ,
auth auth auth
_ _ _
cnt cnt cnt
) ) )
; ; ;
X x X
while while while
( ( (
get get get
_ _ _
line line line
( ( (
buf buf buf
, , ,
MAX max MAX
_ _ _
COL col COL
+ + +
1 1 1
, , ,
MAX max MAX
_ _ _
COL col COL
- - -
9 9 9
) ) )
< < <
= = =
0 0 0
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
nline nline nline
too too too
long long long
, , ,
please pleas please
re re re
- - -
enter enter enter
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
org org org
: : :
\ \ \
t t t
% % %
s s s
" " "
, , ,
buf buf buf
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
write write write
the the the
address address address
* * *
/ / /
X x X
printf printf printf
( ( (
X x X
" " "
\ \ \
nEnter nenter nEnter
the the the
postal postal postal
address address address
for for for
author author author
# # #
% % %
d d d
. . .
Be be Be
sure sure sure
to to to
include includ include
\ \ \
n n n
" " "
, , ,
X x X
auth auth auth
_ _ _
cnt cnt cnt
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
your your your
country countri country
and and and
do do do
not not not
include includ include
your your your
name name name
. . .
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
output output output
_ _ _
till till till
_ _ _
dot dot dot
( ( (
output output output
, , ,
oname onam oname
, , ,
" " "
addr addr addr
: : :
" " "
) ) )
; ; ;
X x X
X x X
/ / /
* * *
write write write
the the the
Email email Email
address address address
* * *
/ / /
X x X
printf printf printf
( ( (
X x X
" " "
\ \ \
nEnter nenter nEnter
the the the
Email email Email
address address address
for for for
author author author
# # #
% % %
d d d
. . .
Use use Use
an an an
address address address
from from from
\ \ \
n n n
" " "
, , ,
X x X
auth auth auth
_ _ _
cnt cnt cnt
) ) )
; ; ;
X x X
printf printf printf
( ( (
X x X
" " "
a a a
registered regist registered
domain domain domain
or or or
well well well
known known know
site site site
. . .
If if If
you you you
give give give
several sever several
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
forms form form
, , ,
list list list
them them them
one one one
per per per
line line line
. . .
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
output output output
_ _ _
till till till
_ _ _
dot dot dot
( ( (
output output output
, , ,
oname onam oname
, , ,
" " "
email email email
: : :
" " "
) ) )
; ; ;
X x X
X x X
/ / /
* * *
write write write
the the the
anonymous anonym anonymous
status status status
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nShould nshould nShould
author author author
# # #
% % %
d d d
remain remain remain
anonymous anonym anonymous
( ( (
enter enter enter
y y y
or or or
n n n
) ) )
? ? ?
" " "
, , ,
X x X
auth auth auth
_ _ _
cnt cnt cnt
) ) )
; ; ;
X x X
while while while
( ( (
get get get
_ _ _
line line line
( ( (
buf buf buf
, , ,
1 1 1
+ + +
1 1 1
, , ,
0 0 0
) ) )
< < <
= = =
0 0 0
| | |
| | |
! ! !
( ( (
buf buf buf
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
y y y
' ' '
| | |
| | |
buf buf buf
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
n n n
' ' '
) ) )
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
nplease npleas nplease
answer answer answer
y y y
or or or
n n n
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
anon anon anon
: : :
\ \ \
t t t
% % %
s s s
" " "
, , ,
buf buf buf
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
determine determin determine
if if if
there there there
is is be
another anoth another
author author author
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nIs nis nIs
there there there
another anoth another
author author author
( ( (
enter enter enter
y y y
or or or
n n n
) ) )
? ? ?
" " "
) ) )
; ; ;
X x X
while while while
( ( (
get get get
_ _ _
line line line
( ( (
buf buf buf
, , ,
1 1 1
+ + +
1 1 1
, , ,
0 0 0
) ) )
< < <
= = =
0 0 0
| | |
| | |
! ! !
( ( (
buf buf buf
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
y y y
' ' '
| | |
| | |
buf buf buf
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
n n n
' ' '
) ) )
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
nplease npleas nplease
answer answer answer
y y y
or or or
n n n
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
if if if
( ( (
buf buf buf
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
y y y
' ' '
) ) )
{ { {
X x X
more more more
_ _ _
auths auth auths
= = =
TRUE true TRUE
; ; ;
X x X
} } }
else els else
{ { {
X x X
more more more
_ _ _
auths auth auths
= = =
FALSE fals FALSE
; ; ;
X x X
} } }
X x X
} } }
while while while
( ( (
more more more
_ _ _
auths auth auths
= = =
= = =
TRUE true TRUE
) ) )
; ; ;
X x X
return return return
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
_ _ _
info info info
- - -
output output output
the the the
- - -
- - -
- - -
info info info
- - -
- - -
- - -
section section section
( ( (
s s s
) ) )
X x X
* * *
X x X
* * *
Read read Read
the the the
needed need need
information inform information
from from from
stdin stdin stdin
, , ,
and and and
write write write
the the the
info info info
section section section
. . .
X x X
* * *
If if If
multiple multipl multiple
info info info
files file file
exist exist exist
, , ,
multiple multipl multiple
info info info
sections section section
will will will
be be be
written written write
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xoutput xoutput Xoutput
_ _ _
info info info
( ( (
output output output
, , ,
oname onam oname
) ) )
X x X
FILE file FILE
* * *
output output output
; ; ;
/ / /
* * *
entry entri entry
' ' '
s s s
output output output
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
oname onam oname
; ; ;
/ / /
* * *
name name name
of of of
the the the
output output output
file file file
* * *
/ / /
X x X
{ { {
X x X
char char char
infoname infonam infoname
[ [ [
MAX max MAX
_ _ _
FILE file FILE
_ _ _
LEN len LEN
+ + +
1 1 1
] ] ]
; ; ;
/ / /
* * *
filename filenam filename
buffer buffer buffer
* * *
/ / /
X x X
char char char
yorn yorn yorn
[ [ [
1 1 1
+ + +
1 1 1
] ] ]
; ; ;
/ / /
* * *
y y y
or or or
n n n
answer answer answer
* * *
/ / /
X x X
char char char
* * *
uuname uunam uuname
; ; ;
/ / /
* * *
name name name
to to to
uuencode uuencod uuencode
as as a
* * *
/ / /
X x X
FILE file FILE
* * *
infile infil infile
; ; ;
/ / /
* * *
info info info
file file file
stream stream stream
* * *
/ / /
X x X
X x X
/ / /
* * *
X x X
* * *
prompt prompt prompt
the the the
user user user
for for for
info info info
information inform information
X x X
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nInfo ninfo nInfo
files file file
should should should
be be be
used use use
only onli only
to to to
supplement supplement supplement
your your your
entry entri entry
. . .
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
For for For
example exampl example
, , ,
info info info
files file file
may may may
provide provid provide
sample sampl sample
input input input
or or or
detailed detail detail
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
information inform information
about about about
your your your
entry entri entry
. . .
Because becaus Because
they they they
are are be
supplemental supplement supplemental
, , ,
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
printf printf printf
( ( (
" " "
the the the
entry entri entry
should should should
not not not
require requir require
them them them
to to to
exist exist exist
. . .
\ \ \
n n n
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
while while while
there there there
is is be
another anoth another
info info info
file file file
to to to
save save save
, , ,
uuencode uuencod uuencode
it it it
X x X
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
Do do Do
you you you
have have have
a a a
info info info
file file file
to to to
include includ include
( ( (
enter enter enter
y y y
or or or
n n n
) ) )
? ? ?
" " "
) ) )
; ; ;
X x X
while while while
( ( (
get get get
_ _ _
line line line
( ( (
yorn yorn yorn
, , ,
1 1 1
+ + +
1 1 1
, , ,
0 0 0
) ) )
< < <
= = =
0 0 0
| | |
| | |
! ! !
( ( (
yorn yorn yorn
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
y y y
' ' '
| | |
| | |
yorn yorn yorn
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
n n n
' ' '
) ) )
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
nplease npleas nplease
answer answer answer
y y y
or or or
n n n
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
while while while
( ( (
yorn yorn yorn
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
y y y
' ' '
) ) )
{ { {
X x X
X x X
/ / /
* * *
read read read
the the the
filename filenam filename
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nEnter nenter nEnter
the the the
info info info
filename filenam filename
: : :
" " "
) ) )
; ; ;
X x X
while while while
( ( (
get get get
_ _ _
line line line
( ( (
infoname infonam infoname
, , ,
MAX max MAX
_ _ _
FILE file FILE
_ _ _
LEN len LEN
+ + +
1 1 1
, , ,
0 0 0
) ) )
< < <
= = =
0 0 0
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
nInfo ninfo nInfo
filename filenam filename
too too too
long long long
, , ,
please pleas please
re re re
- - -
enter enter enter
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
compute comput compute
the the the
basename basenam basename
of of of
the the the
info info info
filename filenam filename
* * *
/ / /
X x X
/ / /
* * *
remove remov remove
the the the
trailing trail trailing
newline newlin newline
* * *
/ / /
X x X
uuname uunam uuname
= = =
& & &
infoname infonam infoname
[ [ [
strlen strlen strlen
( ( (
infoname infonam infoname
) ) )
- - -
1 1 1
] ] ]
; ; ;
X x X
* * *
uuname uunam uuname
= = =
' ' '
\ \ \
0 0 0
' ' '
; ; ;
X x X
/ / /
* * *
avoid avoid avoid
rindex rindex rindex
/ / /
shrrchr shrrchr shrrchr
compat compat compat
issues issu issue
, , ,
do do do
it it it
by by by
hand hand hand
* * *
/ / /
X x X
for for for
( ( (
- - -
- - -
uuname uunam uuname
; ; ;
uuname uunam uuname
> > >
infoname infonam infoname
; ; ;
- - -
- - -
uuname uunam uuname
) ) )
{ { {
X x X
if if if
( ( (
* * *
uuname uunam uuname
= = =
= = =
' ' '
/ / /
' ' '
) ) )
{ { {
X x X
+ + +
+ + +
uuname uunam uuname
; ; ;
X x X
break break break
; ; ;
X x X
} } }
X x X
} } }
X x X
X x X
/ / /
* * *
attempt attempt attempt
to to to
open open open
the the the
info info info
file file file
* * *
/ / /
X x X
infile infil infile
= = =
fopen fopen fopen
( ( (
infoname infonam infoname
, , ,
" " "
r r r
" " "
) ) )
; ; ;
X x X
if if if
( ( (
infile infil infile
= = =
= = =
NULL null NULL
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
\ \ \
n n n
% % %
s s s
: : :
cannot cannot cannot
open open open
info info info
file file file
: : :
% % %
s s s
: : :
" " "
, , ,
X x X
program program program
, , ,
infoname infonam infoname
) ) )
; ; ;
X x X
perror perror perror
( ( (
" " "
" " "
) ) )
; ; ;
X x X
continue continu continue
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
start start start
of of of
the the the
section section section
X x X
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
- - -
- - -
- - -
info info info
- - -
- - -
- - -
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
uuencode uuencod uuencode
the the the
info info info
file file file
* * *
/ / /
X x X
uuencode uuencod uuencode
( ( (
output output output
, , ,
oname onam oname
, , ,
infile infil infile
, , ,
infoname infonam infoname
, , ,
UUINFO uuinfo UUINFO
_ _ _
MODE mode MODE
, , ,
uuname uunam uuname
) ) )
; ; ;
X x X
X x X
printf printf printf
( ( (
" " "
\ \ \
nDo ndo nDo
you you you
have have have
another anoth another
info info info
file file file
to to to
include includ include
( ( (
enter enter enter
y y y
or or or
n n n
) ) )
? ? ?
" " "
) ) )
; ; ;
X x X
while while while
( ( (
get get get
_ _ _
line line line
( ( (
yorn yorn yorn
, , ,
1 1 1
+ + +
1 1 1
, , ,
0 0 0
) ) )
< < <
= = =
0 0 0
| | |
| | |
! ! !
( ( (
yorn yorn yorn
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
y y y
' ' '
| | |
| | |
yorn yorn yorn
[ [ [
0 0 0
] ] ]
= = =
= = =
' ' '
n n n
' ' '
) ) )
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
nplease npleas nplease
answer answer answer
y y y
or or or
n n n
: : :
" " "
) ) )
; ; ;
X x X
} } }
X x X
} } }
; ; ;
X x X
return return return
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
_ _ _
build build build
- - -
output output output
the the the
- - -
- - -
- - -
build build build
- - -
- - -
- - -
section section section
X x X
* * *
X x X
* * *
Read read Read
the the the
needed need need
information inform information
from from from
stdin stdin stdin
, , ,
and and and
write write write
the the the
build build build
section section section
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xoutput xoutput Xoutput
_ _ _
build build build
( ( (
output output output
, , ,
oname onam oname
, , ,
build build build
, , ,
bname bname bname
) ) )
X x X
FILE file FILE
* * *
output output output
; ; ;
/ / /
* * *
entry entri entry
' ' '
s s s
output output output
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
oname onam oname
; ; ;
/ / /
* * *
name name name
of of of
the the the
output output output
file file file
* * *
/ / /
X x X
FILE file FILE
* * *
build build build
; ; ;
/ / /
* * *
open open open
build build build
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
bname bname bname
; ; ;
/ / /
* * *
name name name
of of of
the the the
build build build
file file file
* * *
/ / /
X x X
{ { {
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
start start start
of of of
the the the
section section section
X x X
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
- - -
- - -
- - -
build build build
- - -
- - -
- - -
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
uuencode uuencod uuencode
the the the
program program program
file file file
X x X
* * *
/ / /
X x X
uuencode uuencod uuencode
( ( (
output output output
, , ,
oname onam oname
, , ,
build build build
, , ,
bname bname bname
, , ,
UUBUILD uubuild UUBUILD
_ _ _
MODE mode MODE
, , ,
UUBUILD uubuild UUBUILD
_ _ _
NAME name NAME
) ) )
; ; ;
X x X
return return return
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
_ _ _
program program program
- - -
output output output
the the the
- - -
- - -
- - -
program program program
- - -
- - -
- - -
section section section
X x X
* * *
X x X
* * *
Read read Read
the the the
needed need need
information inform information
form form form
stdin stdin stdin
, , ,
and and and
write write write
the the the
program program program
section section section
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xoutput xoutput Xoutput
_ _ _
program program program
( ( (
output output output
, , ,
oname onam oname
, , ,
prog prog prog
, , ,
pname pname pname
) ) )
X x X
FILE file FILE
* * *
output output output
; ; ;
/ / /
* * *
entry entri entry
' ' '
s s s
output output output
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
oname onam oname
; ; ;
/ / /
* * *
name name name
of of of
the the the
output output output
file file file
* * *
/ / /
X x X
FILE file FILE
* * *
prog prog prog
; ; ;
/ / /
* * *
open open open
program program program
stream stream stream
* * *
/ / /
X x X
char char char
* * *
pname pname pname
; ; ;
/ / /
* * *
name name name
of of of
program program program
file file file
* * *
/ / /
X x X
{ { {
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
start start start
of of of
the the the
section section section
X x X
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
- - -
- - -
- - -
program program program
- - -
- - -
- - -
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
uuencode uuencod uuencode
the the the
program program program
file file file
X x X
* * *
/ / /
X x X
uuencode uuencod uuencode
( ( (
output output output
, , ,
oname onam oname
, , ,
prog prog prog
, , ,
pname pname pname
, , ,
UUPROG uuprog UUPROG
_ _ _
MODE mode MODE
, , ,
UUPROG uuprog UUPROG
_ _ _
NAME name NAME
) ) )
; ; ;
X x X
return return return
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
_ _ _
end end end
- - -
output output output
the the the
- - -
- - -
- - -
end end end
- - -
- - -
- - -
section section section
X x X
* * *
X x X
* * *
Read read Read
the the the
needed need need
information inform information
form form form
stdin stdin stdin
, , ,
and and and
write write write
the the the
' ' '
end end end
section section section
' ' '
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xoutput xoutput Xoutput
_ _ _
end end end
( ( (
output output output
, , ,
oname onam oname
) ) )
X x X
FILE file FILE
* * *
output output output
; ; ;
/ / /
* * *
entry entri entry
' ' '
s s s
output output output
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
oname onam oname
; ; ;
/ / /
* * *
name name name
of of of
the the the
output output output
file file file
* * *
/ / /
X x X
{ { {
X x X
/ / /
* * *
X x X
* * *
write write write
the the the
final final final
section section section
terminator termin terminator
X x X
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
- - -
- - -
- - -
end end end
- - -
- - -
- - -
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
return return return
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
get get get
_ _ _
line line line
- - -
get get get
an an an
answer answer answer
from from from
stdin stdin stdin
X x X
* * *
X x X
* * *
This this This
function function function
will will will
flush flush flush
stdout stdout stdout
, , ,
in in in
case case case
a a a
prompt prompt prompt
is is be
pending pend pending
, , ,
and and and
X x X
* * *
read read read
in in in
the the the
answer answer answer
. . .
X x X
* * *
X x X
* * *
This this This
function function function
returns return return
0 0 0
if if if
the the the
line line line
is is be
too too too
long long long
, , ,
of of of
the the the
length length length
of of of
the the the
X x X
* * *
line line line
( ( (
including includ include
the the the
newline newlin newline
) ) )
of of of
the the the
line line line
was was be
ok ok ok
. . .
This this This
function function function
does doe do
X x X
* * *
not not not
return return return
if if if
ERROR error ERROR
or or or
EOF eof EOF
. . .
X x X
* * *
/ / /
Xint xint Xint
Xget xget Xget
_ _ _
line line line
( ( (
buf buf buf
, , ,
siz siz siz
, , ,
maxcol maxcol maxcol
) ) )
X x X
char char char
* * *
buf buf buf
; ; ;
/ / /
* * *
input input input
buffer buffer buffer
* * *
/ / /
X x X
int int int
siz siz siz
; ; ;
/ / /
* * *
length length length
of of of
input input input
, , ,
including includ include
the the the
newline newlin newline
* * *
/ / /
X x X
int int int
maxcol maxcol maxcol
; ; ;
/ / /
* * *
max max max
col col col
allowed allow allow
, , ,
0 0 0
= = =
> > >
disable disabl disable
check check check
* * *
/ / /
X x X
{ { {
X x X
int int int
length length length
; ; ;
/ / /
* * *
the the the
length length length
of of of
the the the
input input input
line line line
* * *
/ / /
X x X
X x X
/ / /
* * *
flush flush flush
terminal termin terminal
output output output
* * *
/ / /
X x X
fflush fflush fflush
( ( (
stdout stdout stdout
) ) )
; ; ;
X x X
X x X
/ / /
* * *
read read read
the the the
line line line
* * *
/ / /
X x X
if if if
( ( (
fgets fget fgets
( ( (
buf buf buf
, , ,
siz siz siz
+ + +
1 1 1
, , ,
stdin stdin stdin
) ) )
= = =
= = =
NULL null NULL
) ) )
{ { {
X x X
/ / /
* * *
report report report
the the the
problem problem problem
* * *
/ / /
X x X
check check check
_ _ _
io io io
( ( (
stdin stdin stdin
, , ,
" " "
stdin stdin stdin
" " "
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
look look look
for for for
the the the
newline newlin newline
* * *
/ / /
X x X
length length length
= = =
strlen strlen strlen
( ( (
buf buf buf
) ) )
; ; ;
X x X
if if if
( ( (
buf buf buf
[ [ [
length length length
- - -
1 1 1
] ] ]
! ! !
= = =
' ' '
\ \ \
n n n
' ' '
) ) )
{ { {
X x X
int int int
eatchar eatchar eatchar
; ; ;
/ / /
* * *
the the the
char char char
being be be
eaten eaten eat
* * *
/ / /
X x X
X x X
/ / /
* * *
no no no
newline newlin newline
found found find
, , ,
line line line
must must must
be be be
too too too
long long long
, , ,
eat eat eat
the the the
rest rest rest
of of of
the the the
line line line
* * *
/ / /
X x X
do do do
{ { {
X x X
eatchar eatchar eatchar
= = =
fgetc fgetc fgetc
( ( (
stdin stdin stdin
) ) )
; ; ;
X x X
} } }
while while while
( ( (
eatchar eatchar eatchar
! ! !
= = =
EOF eof EOF
& & &
& & &
eatchar eatchar eatchar
! ! !
= = =
' ' '
\ \ \
n n n
' ' '
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
stdin stdin stdin
, , ,
" " "
stdin stdin stdin
" " "
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
report report report
the the the
situation situat situation
* * *
/ / /
X x X
return return return
0 0 0
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
watch watch watch
for for for
long long long
lines line line
, , ,
if if if
needed need need
* * *
/ / /
X x X
if if if
( ( (
maxcol maxcol maxcol
> > >
0 0 0
& & &
& & &
( ( (
length length length
> > >
maxcol maxcol maxcol
| | |
| | |
col col col
_ _ _
len len len
( ( (
buf buf buf
) ) )
> > >
maxcol maxcol maxcol
) ) )
) ) )
{ { {
X x X
/ / /
* * *
report report report
the the the
situation situat situation
* * *
/ / /
X x X
return return return
0 0 0
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
return return return
length length length
* * *
/ / /
X x X
return return return
length length length
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
_ _ _
till till till
_ _ _
dot dot dot
- - -
output output output
a a a
set set set
of of of
lines line line
until until until
' ' '
. . .
' ' '
by by by
itself itself itself
is is be
read read read
X x X
* * *
X x X
* * *
This this This
routine routin routine
will will will
read read read
a a a
set set set
of of of
lines line line
until until until
( ( (
but but but
not not not
including includ include
) ) )
X x X
* * *
a a a
single singl single
line line line
with with with
' ' '
. . .
' ' '
is is be
read read read
. . .
The the The
format format format
of of of
the the the
output output output
is is be
: : :
X x X
* * *
X x X
* * *
leader leader leader
: : :
\ \ \
tfirst tfirst tfirst
line line line
X x X
* * *
\ \ \
tnext tnext tnext
line line line
X x X
* * *
\ \ \
tnext tnext tnext
line line line
X x X
* * *
. . .
. . .
. . .
X x X
* * *
X x X
* * *
This this This
routine routin routine
will will will
not not not
return return return
if if if
I i I
/ / /
O o O
error error error
or or or
EOF eof EOF
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xoutput xoutput Xoutput
_ _ _
till till till
_ _ _
dot dot dot
( ( (
output output output
, , ,
oname onam oname
, , ,
leader leader leader
) ) )
X x X
FILE file FILE
* * *
output output output
; ; ;
/ / /
* * *
entry entri entry
' ' '
s s s
output output output
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
oname onam oname
; ; ;
/ / /
* * *
name name name
of of of
the the the
output output output
file file file
* * *
/ / /
X x X
char char char
* * *
leader leader leader
; ; ;
/ / /
* * *
the the the
lead lead lead
text text text
for for for
the the the
first first first
line line line
* * *
/ / /
X x X
{ { {
X x X
char char char
buf buf buf
[ [ [
BUFSIZ bufsiz BUFSIZ
+ + +
1 1 1
] ] ]
; ; ;
/ / /
* * *
input input input
buffer buffer buffer
* * *
/ / /
X x X
int int int
count count count
; ; ;
/ / /
* * *
lines line line
read read read
* * *
/ / /
X x X
int int int
done done do
= = =
FALSE fals FALSE
; ; ;
/ / /
* * *
TRUE true TRUE
= = =
> > >
finished finish finish
reading read read
input input input
* * *
/ / /
X x X
X x X
/ / /
* * *
instruct instruct instruct
the the the
user user user
on on on
how how how
to to to
input input input
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
\ \ \
nTo nto nTo
end end end
input input input
, , ,
enter enter enter
a a a
line line line
with with with
a a a
single singl single
period period period
. . .
\ \ \
n n n
" " "
) ) )
; ; ;
X x X
X x X
/ / /
* * *
read read read
lines line line
until until until
' ' '
. . .
' ' '
or or or
EOF eof EOF
* * *
/ / /
X x X
count count count
= = =
0 0 0
; ; ;
X x X
while while while
( ( (
! ! !
done done do
) ) )
{ { {
X x X
/ / /
* * *
issue issu issue
the the the
prompt prompt prompt
* * *
/ / /
X x X
printf printf printf
( ( (
" " "
% % %
s s s
\ \ \
t t t
" " "
, , ,
( ( (
count count count
> > >
0 0 0
) ) )
? ? ?
" " "
" " "
: : :
leader leader leader
) ) )
; ; ;
X x X
fflush fflush fflush
( ( (
stdout stdout stdout
) ) )
; ; ;
X x X
X x X
/ / /
* * *
get get get
the the the
line line line
* * *
/ / /
X x X
if if if
( ( (
get get get
_ _ _
line line line
( ( (
buf buf buf
, , ,
BUFSIZ bufsiz BUFSIZ
, , ,
MAX max MAX
_ _ _
COL col COL
- - -
9 9 9
) ) )
< < <
= = =
0 0 0
) ) )
{ { {
X x X
printf printf printf
( ( (
" " "
\ \ \
nline nline nline
too too too
long long long
, , ,
please pleas please
re re re
- - -
enter enter enter
: : :
\ \ \
n n n
\ \ \
t t t
" " "
) ) )
; ; ;
X x X
continue continu continue
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
note note note
if if if
' ' '
. . .
' ' '
was was be
read read read
* * *
/ / /
X x X
if if if
( ( (
strcmp strcmp strcmp
( ( (
buf buf buf
, , ,
" " "
. . .
\ \ \
n n n
" " "
) ) )
= = =
= = =
0 0 0
) ) )
{ { {
X x X
done done do
= = =
TRUE true TRUE
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
write write write
line line line
if if if
we we we
read read read
something someth something
* * *
/ / /
X x X
if if if
( ( (
! ! !
done done do
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
% % %
s s s
\ \ \
t t t
% % %
s s s
" " "
, , ,
( ( (
count count count
+ + +
+ + +
> > >
0 0 0
) ) )
? ? ?
" " "
" " "
: : :
leader leader leader
, , ,
buf buf buf
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
} } }
X x X
} } }
X x X
X x X
/ / /
* * *
if if if
no no no
lines line line
read read read
, , ,
at at at
least least least
output output output
something someth something
* * *
/ / /
X x X
if if if
( ( (
count count count
< < <
= = =
0 0 0
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
% % %
s s s
\ \ \
t t t
. . .
\ \ \
n n n
" " "
, , ,
leader leader leader
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
} } }
X x X
return return return
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
col col col
_ _ _
len len len
- - -
determine determin determine
the the the
highest highest high
that that that
a a a
string string string
would would would
reach reach reach
X x X
* * *
X x X
* * *
Given given Given
a a a
string string string
, , ,
this this this
routine routin routine
returns return return
that that that
a a a
string string string
would would would
reach reach reach
X x X
* * *
if if if
the the the
string string string
were were be
printed print print
at at at
column column column
1 1 1
. . .
Tab tab Tab
stops stop stop
are are be
assumed assum assume
X x X
* * *
to to to
start start start
at at at
9 9 9
, , ,
17 17 17
, , ,
25 25 25
, , ,
33 33 33
, , ,
. . .
. . .
. . .
X x X
* * *
/ / /
Xint xint Xint
Xcol xcol Xcol
_ _ _
len len len
( ( (
string string string
) ) )
X x X
char char char
* * *
string string string
; ; ;
/ / /
* * *
the the the
string string string
to to to
examine examin examine
* * *
/ / /
X x X
{ { {
X x X
int int int
col col col
; ; ;
/ / /
* * *
current current current
column column column
* * *
/ / /
X x X
char char char
* * *
p p p
; ; ;
/ / /
* * *
current current current
char char char
* * *
/ / /
X x X
X x X
/ / /
* * *
scan scan scan
the the the
string string string
* * *
/ / /
X x X
for for for
( ( (
col col col
= = =
0 0 0
, , ,
p p p
= = =
string string string
; ; ;
* * *
p p p
! ! !
= = =
' ' '
\ \ \
0 0 0
' ' '
& & &
& & &
* * *
p p p
! ! !
= = =
' ' '
\ \ \
n n n
' ' '
; ; ;
+ + +
+ + +
p p p
) ) )
{ { {
X x X
/ / /
* * *
note note note
the the the
column column column
shift shift shift
* * *
/ / /
X x X
col col col
= = =
( ( (
* * *
p p p
= = =
= = =
' ' '
\ \ \
t t t
' ' '
) ) )
? ? ?
1 1 1
+ + +
( ( (
( ( (
col col col
+ + +
8 8 8
) ) )
/ / /
8 8 8
* * *
8 8 8
) ) )
: : :
col col col
+ + +
1 1 1
; ; ;
X x X
} } }
X x X
if if if
( ( (
* * *
p p p
= = =
= = =
' ' '
\ \ \
n n n
' ' '
) ) )
{ { {
X x X
- - -
- - -
col col col
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
return return return
the the the
highest highest high
column column column
* * *
/ / /
X x X
return return return
col col col
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
check check check
_ _ _
io io io
- - -
check check check
for for for
EOF eof EOF
or or or
I i I
/ / /
O o O
error error error
on on on
a a a
stream stream stream
X x X
* * *
X x X
* * *
Does doe Does
not not not
return return return
if if if
EOF eof EOF
or or or
I i I
/ / /
O o O
error error error
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xcheck xcheck Xcheck
_ _ _
io io io
( ( (
stream stream stream
, , ,
name name name
, , ,
eof eof eof
_ _ _
ok ok ok
) ) )
X x X
FILE file FILE
* * *
stream stream stream
; ; ;
/ / /
* * *
the the the
stream stream stream
to to to
check check check
* * *
/ / /
X x X
char char char
* * *
name name name
; ; ;
/ / /
* * *
the the the
name name name
of of of
this this this
stream stream stream
* * *
/ / /
X x X
int int int
eof eof eof
_ _ _
ok ok ok
; ; ;
/ / /
* * *
EOF eof EOF
_ _ _
OK ok OK
or or or
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
* * *
/ / /
X x X
{ { {
X x X
/ / /
* * *
test test test
for for for
I i I
/ / /
O o O
error error error
* * *
/ / /
X x X
if if if
( ( (
ferror ferror ferror
( ( (
stream stream stream
) ) )
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
% % %
s s s
: : :
error error error
on on on
% % %
s s s
: : :
" " "
, , ,
program program program
, , ,
name name name
) ) )
; ; ;
X x X
perror perror perror
( ( (
" " "
" " "
) ) )
; ; ;
X x X
exit exit exit
( ( (
1 1 1
) ) )
; ; ;
X x X
X x X
/ / /
* * *
test test test
for for for
EOF eof EOF
* * *
/ / /
X x X
} } }
else els else
if if if
( ( (
eof eof eof
_ _ _
ok ok ok
= = =
= = =
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
& & &
& & &
feof feof feof
( ( (
stream stream stream
) ) )
) ) )
{ { {
X x X
fprintf fprintf fprintf
( ( (
stderr stderr stderr
, , ,
" " "
% % %
s s s
: : :
EOF eof EOF
on on on
% % %
s s s
\ \ \
n n n
" " "
, , ,
program program program
, , ,
name name name
) ) )
; ; ;
X x X
exit exit exit
( ( (
1 1 1
) ) )
; ; ;
X x X
} } }
X x X
return return return
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
uuencode uuencod uuencode
- - -
uuencode uuencod uuencode
a a a
file file file
X x X
* * *
X x X
* * *
Perform perform Perform
the the the
uuencoding uuencod uuencoding
process process process
identical ident identical
to to to
the the the
process process process
performed perform perform
X x X
* * *
by by by
the the the
uuencode uuencod uuencode
( ( (
1 1 1
) ) )
utility util utility
. . .
X x X
* * *
X x X
* * *
This this This
routine routin routine
implements implement implement
the the the
algorithm algorithm algorithm
described describ describe
in in in
the the the
uuencode uuencod uuencode
( ( (
5 5 5
) ) )
X x X
* * *
4 4 4
. . .
3 3 3
BSD bsd BSD
Reno reno Reno
man man man
page page page
. . .
X x X
* * *
/ / /
Xvoid xvoid Xvoid
Xuuencode xuuencod Xuuencode
( ( (
output output output
, , ,
oname onam oname
, , ,
infile infil infile
, , ,
iname inam iname
, , ,
umode umod umode
, , ,
uname unam uname
) ) )
X x X
FILE file FILE
* * *
output output output
; ; ;
/ / /
* * *
output output output
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
oname onam oname
; ; ;
/ / /
* * *
output output output
filename filenam filename
* * *
/ / /
X x X
FILE file FILE
* * *
infile infil infile
; ; ;
/ / /
* * *
input input input
file file file
stream stream stream
* * *
/ / /
X x X
char char char
* * *
iname inam iname
; ; ;
/ / /
* * *
input input input
filename filenam filename
* * *
/ / /
X x X
int int int
umode umod umode
; ; ;
/ / /
* * *
the the the
mode mode mode
to to to
put put put
on on on
the the the
uuencode uuencod uuencode
file file file
* * *
/ / /
X x X
char char char
* * *
uname unam uname
; ; ;
/ / /
* * *
name name name
to to to
put put put
on on on
the the the
uuencode uuencod uuencode
file file file
* * *
/ / /
X x X
{ { {
X x X
char char char
buf buf buf
[ [ [
UUENCODE uuencod UUENCODE
_ _ _
LEN len LEN
+ + +
1 1 1
] ] ]
; ; ;
/ / /
* * *
the the the
uuencode uuencod uuencode
buffer buffer buffer
* * *
/ / /
X x X
int int int
read read read
_ _ _
len len len
; ; ;
/ / /
* * *
actual actual actual
number number number
of of of
chars char char
read read read
* * *
/ / /
X x X
int int int
val val val
; ; ;
/ / /
* * *
6 6 6
bit bit bit
chunk chunk chunk
from from from
buf buf buf
* * *
/ / /
X x X
char char char
filler filler filler
= = =
' ' '
\ \ \
0 0 0
' ' '
; ; ;
/ / /
* * *
filler filler filler
uuencode uuencod uuencode
pad pad pad
text text text
* * *
/ / /
X x X
char char char
* * *
p p p
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
output output output
the the the
initial initi initial
uuencode uuencod uuencode
header header header
X x X
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
begin begin begin
% % %
o o o
% % %
s s s
\ \ \
n n n
" " "
, , ,
umode umod umode
, , ,
uname unam uname
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
clear clear clear
out out out
the the the
input input input
buffer buffer buffer
X x X
* * *
/ / /
X x X
for for for
( ( (
p p p
= = =
buf buf buf
; ; ;
p p p
< < <
& & &
buf buf buf
[ [ [
sizeof sizeof sizeof
( ( (
buf buf buf
) ) )
/ / /
sizeof sizeof sizeof
( ( (
buf buf buf
[ [ [
0 0 0
] ] ]
) ) )
] ] ]
; ; ;
+ + +
+ + +
p p p
) ) )
{ { {
X x X
* * *
p p p
= = =
' ' '
\ \ \
0 0 0
' ' '
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
X x X
* * *
We we We
will will will
process process process
UUENCODE uuencod UUENCODE
_ _ _
LEN len LEN
chars char char
at at at
a a a
time time time
, , ,
forming form form
X x X
* * *
a a a
single singl single
output output output
line line line
each each each
time time time
. . .
X x X
* * *
/ / /
X x X
while while while
( ( (
( ( (
read read read
_ _ _
len len len
= = =
fread fread fread
( ( (
buf buf buf
, , ,
sizeof sizeof sizeof
( ( (
buf buf buf
[ [ [
0 0 0
] ] ]
) ) )
, , ,
UUENCODE uuencod UUENCODE
_ _ _
LEN len LEN
, , ,
infile infil infile
) ) )
) ) )
> > >
0 0 0
) ) )
{ { {
X x X
X x X
/ / /
* * *
X x X
* * *
the the the
first first first
character charact character
is is be
the the the
length length length
character charact character
X x X
* * *
/ / /
X x X
fputc fputc fputc
( ( (
UUENCODE uuencod UUENCODE
( ( (
read read read
_ _ _
len len len
) ) )
, , ,
output output output
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
We we We
will will will
convert convert convert
24 24 24
bits bit bit
at at at
a a a
time time time
. . .
Thus thus Thus
we we we
will will will
convert convert convert
X x X
* * *
3 3 3
sets set set
of of of
8 8 8
bits bit bit
into into into
4 4 4
sets set set
of of of
uuencoded uuencod uuencoded
6 6 6
bits bit bit
. . .
X x X
* * *
/ / /
X x X
for for for
( ( (
p p p
= = =
buf buf buf
; ; ;
read read read
_ _ _
len len len
> > >
0 0 0
; ; ;
read read read
_ _ _
len len len
- - -
= = =
3 3 3
, , ,
p p p
+ + +
= = =
3 3 3
) ) )
{ { {
X x X
X x X
/ / /
* * *
bits bit bits
0 0 0
to to to
5 5 5
* * *
/ / /
X x X
val val val
= = =
( ( (
p p p
[ [ [
0 0 0
] ] ]
> > >
> > >
2 2 2
) ) )
& & &
0 0 0
x x x
3 3 3
f f f
; ; ;
X x X
fputc fputc fputc
( ( (
UUENCODE uuencod UUENCODE
( ( (
val val val
) ) )
, , ,
output output output
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
bits bit bits
6 6 6
to to to
11 11 11
* * *
/ / /
X x X
val val val
= = =
( ( (
( ( (
p p p
[ [ [
0 0 0
] ] ]
< < <
< < <
4 4 4
) ) )
& & &
0 0 0
x x x
30 30 30
) ) )
| | |
( ( (
( ( (
p p p
[ [ [
1 1 1
] ] ]
> > >
> > >
4 4 4
) ) )
& & &
0 0 0
x x x
0 0 0
f f f
) ) )
; ; ;
X x X
fputc fputc fputc
( ( (
UUENCODE uuencod UUENCODE
( ( (
val val val
) ) )
, , ,
output output output
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
bits bit bits
12 12 12
to to to
17 17 17
* * *
/ / /
X x X
val val val
= = =
( ( (
( ( (
p p p
[ [ [
1 1 1
] ] ]
< < <
< < <
2 2 2
) ) )
& & &
0 0 0
x x x
3 3 3
c c c
) ) )
| | |
( ( (
( ( (
p p p
[ [ [
2 2 2
] ] ]
> > >
> > >
6 6 6
) ) )
& & &
0 0 0
x x x
03 03 03
) ) )
; ; ;
X x X
fputc fputc fputc
( ( (
UUENCODE uuencod UUENCODE
( ( (
val val val
) ) )
, , ,
output output output
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
bits bit bits
18 18 18
to to to
23 23 23
* * *
/ / /
X x X
val val val
= = =
p p p
[ [ [
2 2 2
] ] ]
& & &
0 0 0
x x x
3 3 3
f f f
; ; ;
X x X
fputc fputc fputc
( ( (
UUENCODE uuencod UUENCODE
( ( (
val val val
) ) )
, , ,
output output output
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
} } }
X x X
X x X
/ / /
* * *
end end end
of of of
UUENCODE uuencod UUENCODE
_ _ _
LEN len LEN
line line line
* * *
/ / /
X x X
fputc fputc fputc
( ( (
' ' '
\ \ \
n n n
' ' '
, , ,
output output output
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
X x X
* * *
clear clear clear
out out out
the the the
input input input
buffer buffer buffer
( ( (
don don don
' ' '
t t t
depend depend depend
on on on
bzero bzero bzero
( ( (
) ) )
or or or
memset memset memset
( ( (
) ) )
) ) )
X x X
* * *
/ / /
X x X
for for for
( ( (
p p p
= = =
buf buf buf
; ; ;
p p p
< < <
& & &
buf buf buf
[ [ [
sizeof sizeof sizeof
( ( (
buf buf buf
) ) )
/ / /
sizeof sizeof sizeof
( ( (
buf buf buf
[ [ [
0 0 0
] ] ]
) ) )
] ] ]
; ; ;
+ + +
+ + +
p p p
) ) )
{ { {
X x X
* * *
p p p
= = =
' ' '
\ \ \
0 0 0
' ' '
; ; ;
X x X
} } }
X x X
} } }
X x X
X x X
/ / /
* * *
check check check
the the the
last last last
read read read
on on on
the the the
input input input
file file file
* * *
/ / /
X x X
check check check
_ _ _
io io io
( ( (
infile infil infile
, , ,
iname inam iname
, , ,
EOF eof EOF
_ _ _
OK ok OK
) ) )
; ; ;
X x X
X x X
/ / /
* * *
write write write
end end end
of of of
uuencode uuencod uuencode
file file file
* * *
/ / /
X x X
fprintf fprintf fprintf
( ( (
output output output
, , ,
" " "
% % %
c c c
\ \ \
nend nend nend
\ \ \
n n n
" " "
, , ,
UUENCODE uuencod UUENCODE
( ( (
filler filler filler
) ) )
) ) )
; ; ;
X x X
check check check
_ _ _
io io io
( ( (
output output output
, , ,
oname onam oname
, , ,
EOF eof EOF
_ _ _
NOT not NOT
_ _ _
OK ok OK
) ) )
; ; ;
X x X
} } }
SHAR shar SHAR
_ _ _
EOF eof EOF
chmod chmod chmod
0444 0444 0444
mkentry mkentri mkentry
. . .
c c c
| | |
| | |
echo echo echo
" " "
restore restor restore
of of of
mkentry mkentri mkentry
. . .
c c c
failed fail failed
" " "
set set set
` ` `
wc wc wc
- - -
c c c
mkentry mkentri mkentry
. . .
c c c
` ` `
; ; ;
Wc wc Wc
_ _ _
c c c
= = =
$ $ $
1 1 1
if if if
test test test
" " "
$ $ $
Wc wc Wc
_ _ _
c c c
" " "
! ! !
= = =
" " "
33961 33961 33961
" " "
; ; ;
then then then
echo echo echo
original origin original
size size size
33961 33961 33961
, , ,
current current current
size size size
$ $ $
Wc wc Wc
_ _ _
c c c
fi fi fi
# # #
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
obfuscate obfusc obfuscate
. . .
info info info
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
= = =
echo echo echo
" " "
x x x
- - -
extracting extract extract
obfuscate obfusc obfuscate
. . .
info info info
( ( (
Text text Text
) ) )
" " "
sed sed sed
' ' '
s s s
/ / /
^ ^ ^
X x X
/ / /
/ / /
' ' '
< < <
< < <
' ' '
SHAR shar SHAR
_ _ _
EOF eof EOF
' ' '
> > >
obfuscate obfusc obfuscate
. . .
info info info
& & &
& & &
X x X
1993 1993 1993
Obfuscated obfusc Obfuscated
contest contest contest
information inform information
X x X
XCopyright xcopyright XCopyright
( ( (
c c c
) ) )
Landon landon Landon
Curt curt Curt
Noll noll Noll
& & &
Larry larri Larry
Bassel bassel Bassel
, , ,
1993 1993 1993
. . .
XAll xall XAll
Rights right Rights
Reserved reserv Reserved
. . .
Permission permiss Permission
for for for
personal person personal
, , ,
education educ education
or or or
non non non
- - -
profit profit profit
use use use
is is be
Xgranted xgrant Xgranted
provided provid provide
this this this
this this this
copyright copyright copyright
and and and
notice notic notice
are are be
included includ include
in in in
its it it
entirety entireti entirety
Xand xand Xand
remains remain remain
unaltered unalt unaltered
. . .
All all All
other other other
uses use us
must must must
receive receiv receive
prior prior prior
permission permiss permission
in in in
writing write write
Xfrom xfrom Xfrom
both both both
Landon landon Landon
Curt curt Curt
Noll noll Noll
and and and
Larry larri Larry
Bassel bassel Bassel
. . .
X x X
XThe xthe XThe
International intern International
Obfuscated obfusc Obfuscated
C c C
Code code Code
Contest contest Contest
( ( (
IOCCC ioccc IOCCC
) ) )
, , ,
in in in
the the the
sprit sprit sprit
of of of
Xco xco Xco
- - -
operation oper operation
, , ,
is is be
willing will willing
mention mention mention
other other other
programming program programming
contents content content
, , ,
as as a
space space space
Xpermits xpermit Xpermits
. . .
X x X
XHow xhow XHow
to to to
have have have
your your your
contest contest contest
included includ include
in in in
this this this
file file file
: : :
X x X
X x X
If if If
you you you
wish wish wish
the the the
IOCCC ioccc IOCCC
judges judg judge
to to to
include includ include
your your your
contest contest contest
in in in
this this this
file file file
, , ,
X x X
send send send
a a a
request request request
to to to
: : :
X x X
X x X
judges judg judge
@ @ @
toad toad toad
. . .
com com com
X x X
X x X
We we We
request request request
that that that
contest contest contest
descriptions descript description
be be be
limited limit limit
to to to
50 50 50
lines line line
and and and
to to to
X x X
not not not
exceed exceed exceed
2500 2500 2500
bytes byte byte
. . .
We we We
typically typic typically
request request request
that that that
your your your
contest contest contest
X x X
include includ include
a a a
current current current
description descript description
of of of
the the the
IOCCC ioccc IOCCC
. . .
X x X
X x X
In in In
order order order
to to to
be be be
included includ include
in in in
this this this
file file file
for for for
given given give
year year year
, , ,
we we we
must must must
X x X
receive receiv receive
a a a
current current current
description descript description
no no no
EARLIER earlier EARLIER
than than than
Jan jan Jan
1 1 1
00 00 00
: : :
00 00 00
: : :
00 00 00
UTC utc UTC
and and and
X x X
no no no
LATER later LATER
than than than
Feb feb Feb
15 15 15
00 00 00
: : :
00 00 00
: : :
00 00 00
UTC utc UTC
. . .
Agreement agreement Agreement
to to to
publish publish publish
your your your
X x X
contest contest contest
must must must
also also also
be be be
obtained obtain obtain
prior prior prior
to to to
Feb feb Feb
15 15 15
. . .
Annual annual Annual
contests contest contest
X x X
that that that
fail fail fail
to to to
submit submit submit
a a a
new new new
entry entri entry
will will will
be be be
dropped drop drop
from from from
this this this
file file file
. . .
X x X
XOfficial xoffici XOfficial
Disclaimer disclaim Disclaimer
: : :
( ( (
pardon pardon pardon
the the the
officialese officiales officialese
) ) )
X x X
X x X
The the The
contents content content
noted note note
below below below
, , ,
other other other
than than than
the the the
IOCCC ioccc IOCCC
, , ,
are are be
not not not
affiliated affili affiliate
X x X
with with with
the the the
IOCCC ioccc IOCCC
, , ,
nor nor nor
are are be
they they they
endorsed endors endorse
by by by
the the the
IOCCC ioccc IOCCC
. . .
We we We
reserve reserv reserve
the the the
X x X
right right right
to to to
refuse refus refuse
to to to
print print print
information inform information
about about about
a a a
given given give
contest contest contest
. . .
X x X
X x X
The the The
information inform information
below below below
was was be
provided provid provide
by by by
the the the
particular particular particular
contest contest contest
X x X
organizer organ organizer
( ( (
s s s
) ) )
and and and
printed print print
by by by
permission permiss permission
. . .
Please pleas Please
contact contact contact
the the the
X x X
contest contest contest
organizer organ organizer
( ( (
s s s
) ) )
directly direct directly
regarding regard regard
their their their
contents content content
. . .
X x X
XWith xwith XWith
that that that
official offici official
notice notic notice
given given give
, , ,
we we we
present present present
for for for
your your your
ENJOYMENT enjoy ENJOYMENT
, , ,
the the the
following follow following
Xinformation xinform Xinformation
about about about
contents content content
: : :
X x X
X x X
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
X x X
X x X
10 10 10
th th th
International intern International
Obfuscated obfusc Obfuscated
C c C
Contest contest Contest
X x X
X x X
" " "
The the The
original origin original
obfuscated obfusc obfuscated
contest contest contest
" " "
X x X
X x X
Obfuscate obfusc Obfuscate
: : :
tr tr tr
. . .
v v v
. . .
- - -
cated cate cat
, , ,
- - -
cating cate cating
, , ,
- - -
cates cate cates
. . .
1 1 1
. . .
a a a
. . .
To to To
render render render
obscure obscur obscure
. . .
X x X
b b b
. . .
To to To
darken darken darken
. . .
2 2 2
. . .
To to To
confuse confus confuse
: : :
Their their Their
emotions emot emotion
obfuscated obfusc obfuscate
X x X
their their their
judgment judgment judgment
. . .
[ [ [
LLat llat LLat
. . .
obfuscare obfuscar obfuscare
, , ,
to to to
darken darken darken
: : :
ob ob ob
( ( (
intensive intens intensive
) ) )
+ + +
X x X
Lat lat Lat
. . .
fuscare fuscar fuscare
, , ,
to to to
darken darken darken
< < <
fuscus fuscus fuscus
, , ,
dark dark dark
. . .
] ] ]
- - -
obfuscation obfusc obfuscation
n n n
. . .
X x X
obfuscatory obfuscatori obfuscatory
adj adj adj
. . .
X x X
X x X
GOALS goal GOALS
OF of OF
THE the THE
CONTEST contest CONTEST
: : :
X x X
X x X
* * *
To to To
write write write
the the the
most most most
Obscure obscur Obscure
/ / /
Obfuscated obfusc Obfuscated
C c C
program program program
under under under
the the the
rules rule rule
below below below
. . .
X x X
* * *
To to To
show show show
the the the
importance import importance
of of of
programming program program
style style style
, , ,
in in in
an an an
ironic iron ironic
way way way
. . .
X x X
* * *
To to To
stress stress stress
C c C
compilers compil compiler
with with with
unusual unusu unusual
code code code
. . .
X x X
* * *
To to To
illustrate illustr illustrate
some some some
of of of
the the the
subtleties subtleti subtlety
of of of
the the the
C c C
language languag language
. . .
X x X
* * *
To to To
provide provid provide
a a a
safe safe safe
forum forum forum
for for for
poor poor poor
C c C
code code code
. . .
: : :
- - -
) ) )
X x X
X x X
The the The
IOCCC ioccc IOCCC
is is be
the the the
grandfather grandfath grandfather
of of of
USENET usenet USENET
programming program program
contests contest contest
. . .
Since sinc Since
X x X
1984 1984 1984
, , ,
this this this
contest contest contest
demonstrated demonstr demonstrate
that that that
a a a
program program program
that that that
mearly mear mearly
works work work
X x X
correctly correct correctly
is is be
not not not
sufficient suffici sufficient
. . .
The the The
IOCCC ioccc IOCCC
has has have
also also also
done done do
much much much
to to to
add add add
X x X
the the the
arcane arcan arcane
word word word
' ' '
obfuscated obfusc obfuscate
' ' '
back back back
into into into
the the the
English english English
language languag language
. . .
X x X
( ( (
see see see
" " "
The the The
New new New
Hacker hacker Hacker
' ' '
s s s
Dictionary dictionari Dictionary
" " "
by by by
Eric eric Eric
Raymond raymond Raymond
) ) )
X x X
X x X
You you You
are are be
strongly strong strongly
encouraged encourag encourage
to to to
read read read
the the the
new new new
contest contest contest
rules rule rule
before befor before
X x X
sending send send
any ani any
entries entri entry
. . .
The the The
rules rule rule
, , ,
and and and
sometimes sometim sometimes
the the the
contest contest contest
Email email Email
X x X
address address address
itself itself itself
, , ,
change chang change
over over over
time time time
. . .
A a A
valid valid valid
entry entri entry
one one one
year year year
may may may
X x X
be be be
rejected reject reject
in in in
a a a
later later late
year year year
due due due
to to to
changes chang change
in in in
the the the
rules rule rule
. . .
The the The
typical typic typical
X x X
start start start
date date date
for for for
contests contest contest
is is be
in in in
early earli early
March march March
. . .
Contest contest Contest
rules rule rule
are are be
normally normal normally
not not not
X x X
finalized final finalize
and and and
posted post post
until until until
the the the
beginning begin beginning
of of of
the the the
contest contest contest
. . .
The the The
typical typic typical
X x X
closing close closing
date date date
for for for
contests contest contest
are are be
in in in
early earli early
May may May
. . .
X x X
X x X
The the The
contest contest contest
rules rule rule
are are be
posted post post
to to to
comp comp comp
. . .
unix unix unix
. . .
wizards wizard wizard
, , ,
comp comp comp
. . .
lang lang lang
. . .
c c c
, , ,
X x X
misc misc misc
. . .
misc misc misc
, , ,
alt alt alt
. . .
sources sourc source
and and and
comp comp comp
. . .
sources sourc source
. . .
d d d
. . .
If if If
you you you
do do do
not not not
have have have
access access access
X x X
to to to
these these these
groups group group
, , ,
or or or
if if if
you you you
missed miss miss
the the the
early earli early
March march March
posting post posting
, , ,
you you you
may may may
X x X
request request request
a a a
copy copi copy
from from from
the the the
judges judg judge
, , ,
via via via
Email email Email
, , ,
at at at
; ; ;
X x X
X x X
judges judg judge
@ @ @
toad toad toad
. . .
com com com
- - -
or or or
- - -
. . .
. . .
. . .
! ! !
{ { {
sun sun sun
, , ,
uunet uunet uunet
, , ,
utzoo utzoo utzoo
, , ,
pyramid pyramid pyramid
} } }
! ! !
hoptoad hoptoad hoptoad
! ! !
judges judg judge
X x X
X x X
Previous previous Previous
contest contest contest
winners winner winner
are are be
available avail available
via via via
anonymous anonym anonymous
ftp ftp ftp
from from from
X x X
ftp ftp ftp
. . .
uu uu uu
. . .
net net net
under under under
the the the
directory directori directory
/ / /
pub pub pub
/ / /
ioccc ioccc ioccc
. . .
X x X
X x X
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
X x X
X x X
0 0 0
th th th
International intern International
Obfuscated obfusc Obfuscated
Perl perl Perl
Contest contest Contest
X x X
By by By
: : :
Landon landon Landon
Noll noll Noll
& & &
Larry larri Larry
Wall wall Wall
X x X
X x X
This this This
content content content
is is be
being be be
planned plan plan
. . .
Someday someday Someday
when when when
Landon landon Landon
& & &
Larry larri Larry
are are be
not not not
too too too
X x X
busy busi busy
, , ,
they they they
will will will
actually actual actually
get get get
around around around
to to to
posting post post
the the the
first first first
set set set
of of of
rules rule rule
! ! !
X x X
X x X
Landon landon Landon
says say say
: : :
" " "
Yes yes Yes
, , ,
I i I
know know know
that that that
I i I
said said say
we we we
would would would
have have have
a a a
contest contest contest
in in in
1993 1993 1993
, , ,
X x X
but but but
other other other
existing exist exist
projects project project
got got get
in in in
the the the
way way way
. . .
Hopefully hope Hopefully
X x X
something someth something
will will will
be be be
developed develop develop
after after after
Nov nov Nov
1993 1993 1993
. . .
" " "
X x X
X x X
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
- - -
X x X
X x X
2 2 2
nd nd nd
International intern International
obFUsCaTeD obfusc obFUsCaTeD
POsTsCripT postscript POsTsCripT
Contest contest Contest
X x X
Jonathan jonathan Jonathan
Monsarrat monsarrat Monsarrat
( ( (
jgm jgm jgm
@ @ @
cs cs c
. . .
brown brown brown
. . .
edu edu edu
) ) )
X x X
Alena alena Alena
Lacova lacova Lacova
( ( (
alena alena alena
@ @ @
nikhef nikhef nikhef
. . .
nl nl nl
) ) )
X x X
X x X
A a A
contest contest contest
of of of
programming program program
skills skill skill
and and and
knowledge knowledg knowledge
, , ,
exclusively exclus exclusively
for for for
the the the
X x X
PostScript postscript PostScript
programming program program
language languag language
. . .
Its it Its
purpose purpos purpose
: : :
X x X
X x X
* * *
To to To
spread spread spread
knowledge knowledg knowledge
of of of
PostScript postscript PostScript
and and and
its it it
details detail detail
. . .
X x X
* * *
To to To
applaud applaud applaud
those those those
with with with
the the the
best best best
tricks trick trick
. . .
X x X
* * *
To to To
prove prove prove
that that that
humans human human
can can can
beat beat beat
those those those
damnable damnabl damnable
machine machin machine
generators generat generator
at at at
X x X
their their their
own own own
game game game
by by by
writing write write
the the the
most most most
obscure obscur obscure
and and and
mysterious mysteri mysterious
PostScript postscript PostScript
X x X
programs program program
ever ever ever
. . .
X x X
X x X
Winners winner Winners
will will will
receive receiv receive
the the the
fame fame fame
and and and
attention attent attention
that that that
goes goe go
with with with
having have have
their their their
X x X
program program program
entry entri entry
posted post post
as as a
a a a
winner winner winner
to to to
programmers programm programmer
world world world
- - -
wide wide wide
. . .
X x X
X x X
The the The
1993 1993 1993
contest contest contest
rules rule rule
and and and
results result result
are are be
available avail available
by by by
ftp ftp ftp
as as a
X x X
` ` `
` ` `
wilma wilma wilma
. . .
cs cs c
. . .
brown brown brown
. . .
edu edu edu
: : :
pub pub pub
/ / /
postscript postscript postscript
/ / /
obfuscated obfusc obfuscate
* * *
. . .
shar shar shar
' ' '
' ' '
, , ,
or or or
individually individu individually
X x X
in in in
the the the
obfuscated obfusc obfuscated
directory directori directory
. . .
The the The
judges judg judge
will will will
post post post
the the the
1994 1994 1994
rules rule rule
X x X
in in in
November novemb November
to to to
comp comp comp
. . .
lang lang lang
. . .
postscript postscript postscript
on on on
Usenet usenet Usenet
, , ,
and and and
other other other
places place place
. . .
X x X
Send send Send
questions question question
to to to
jgm jgm jgm
@ @ @
cs cs c
. . .
brown brown brown
. . .
edu edu edu
. . .
X x X
X x X
Categories categori Categories
include includ include
: : :
Best best Best
Obfuscated obfusc Obfuscated
PostScript postscript PostScript
, , ,
Best best Best
Artwork artwork Artwork
, , ,
X x X
Most most Most
Compact compact Compact
, , ,
Best best Best
Interactive interact Interactive
Program program Program
, , ,
Most most Most
Useful use Useful
, , ,
and and and
X x X
anything anyth anything
so so so
unusual unusu unusual
and and and
creative creativ creative
that that that
it it it
deserves deserv deserve
an an an
award award award
. . .
X x X
X x X
The the The
judges judg judge
will will will
choose choos choose
the the the
winners winner winner
of of of
each each each
category categori category
. . .
X x X
X x X
Alena alena Alena
Lacova lacova Lacova
is is be
a a a
system system system
administrator administr administrator
at at at
NIKHEF nikhef NIKHEF
( ( (
Institute institut Institute
for for for
High high High
X x X
Energy energi Energy
and and and
Nuclear nuclear Nuclear
Physics physic Physics
) ) )
in in in
the the the
Netherlands netherland Netherlands
. . .
She she She
is is be
the the the
author author author
of of of
X x X
The the The
PostScript postscript PostScript
Chaos chao Chaos
Programs program Programs
, , ,
which which which
draw draw draw
Julia julia Julia
sets set set
, , ,
Mandelbrot mandelbrot Mandelbrot
sets set set
X x X
and and and
other other other
kinds kind kind
of of of
fractal fractal fractal
functions function function
. . .
X x X
X x X
Jonathan jonathan Jonathan
Monsarrat monsarrat Monsarrat
is is be
a a a
graduate graduat graduate
student student student
from from from
MIT mit MIT
and and and
Brown brown Brown
University univers University
X x X
in in in
the the the
U u U
. . .
S s S
. . .
A a A
. . .
He he He
is is be
the the the
FAQ faq FAQ
maintainer maintain maintainer
for for for
the the the
Usenet usenet Usenet
newsgroup newsgroup newsgroup
X x X
comp comp comp
. . .
lang lang lang
. . .
postscript postscript postscript
and and and
the the the
author author author
of of of
The the The
PostScript postscript PostScript
Zone zone Zone
and and and
LameTeX lametex LameTeX
. . .
X x X
. . .
X x X
SHAR shar SHAR
_ _ _
EOF eof EOF
chmod chmod chmod
0444 0444 0444
obfuscate obfusc obfuscate
. . .
info info info
| | |
| | |
echo echo echo
" " "
restore restor restore
of of of
obfuscate obfusc obfuscate
. . .
info info info
failed fail fail
" " "
set set set
` ` `
wc wc wc
- - -
c c c
obfuscate obfusc obfuscate
. . .
info info info
` ` `
; ; ;
Wc wc Wc
_ _ _
c c c
= = =
$ $ $
1 1 1
if if if
test test test
" " "
$ $ $
Wc wc Wc
_ _ _
c c c
" " "
! ! !
= = =
" " "
6257 6257 6257
" " "
; ; ;
then then then
echo echo echo
original origin original
size size size
6257 6257 6257
, , ,
current current current
size size size
$ $ $
Wc wc Wc
_ _ _
c c c
fi fi fi
exit exit exit
0 0 0
- - -
- - -
Sunnyvale sunnyval Sunnyvale
residents resid resident
: : :
Vote vote Vote
Landon landon Landon
Noll noll Noll
for for for
Sunnyvale sunnyval Sunnyvale
City citi City
Council council Council
seat seat seat
1 1 1
. . .
